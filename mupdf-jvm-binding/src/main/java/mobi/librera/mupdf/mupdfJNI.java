/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mobi.librera.mupdf;


public class mupdfJNI {
  public final static native byte[] FZ_VERSION_get();
  public final static native int FZ_VERSION_MAJOR_get();
  public final static native int FZ_VERSION_MINOR_get();
  public final static native int FZ_VERSION_PATCH_get();
  public final static native int PATH_MAX_get();
  public final static native float FZ_PI_get();
  public final static native float FZ_RADIAN_get();
  public final static native float FZ_DEGREE_get();
  public final static native float FZ_SQRT2_get();
  public final static native float FZ_LN2_get();
  public final static native int ARCH_HAS_NEON_get();
  public final static native int ARCH_HAS_SSE_get();
  public final static native int HAVE_SIGSETJMP_get();
  public final static native int EOF_get();
  public final static native int SEEK_SET_get();
  public final static native int SEEK_CUR_get();
  public final static native int SEEK_END_get();
  public final static native long fz_stat_ctime(byte[] jarg1);
  public final static native long fz_stat_mtime(byte[] jarg1);
  public final static native int fz_mkdir(byte[] jarg1);
  public final static native int fz_is_pow2(int jarg1);
  public final static native int FZ_VERBOSE_EXCEPTIONS_get();
  public final static native void fz_alloc_context_user_set(long jarg1, fz_alloc_context jarg1_, long jarg2);
  public final static native long fz_alloc_context_user_get(long jarg1, fz_alloc_context jarg1_);
  public final static native void fz_alloc_context_malloc_set(long jarg1, fz_alloc_context jarg1_, long jarg2);
  public final static native long fz_alloc_context_malloc_get(long jarg1, fz_alloc_context jarg1_);
  public final static native void fz_alloc_context_realloc_set(long jarg1, fz_alloc_context jarg1_, long jarg2);
  public final static native long fz_alloc_context_realloc_get(long jarg1, fz_alloc_context jarg1_);
  public final static native void fz_alloc_context_free_set(long jarg1, fz_alloc_context jarg1_, long jarg2);
  public final static native long fz_alloc_context_free_get(long jarg1, fz_alloc_context jarg1_);
  public final static native long new_fz_alloc_context();
  public final static native void delete_fz_alloc_context(long jarg1);
  public final static native void fz_vthrow(long jarg1, fz_context jarg1_, int jarg2, byte[] jarg3, long jarg4);
  public final static native void fz_throw(long jarg1, fz_context jarg1_, int jarg2, byte[] jarg3);
  public final static native void fz_rethrow(long jarg1, fz_context jarg1_);
  public final static native void fz_morph_error(long jarg1, fz_context jarg1_, int jarg2, int jarg3);
  public final static native void fz_vwarn(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3);
  public final static native void fz_warn(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native byte[] fz_caught_message(long jarg1, fz_context jarg1_);
  public final static native int fz_caught(long jarg1, fz_context jarg1_);
  public final static native int fz_caught_errno(long jarg1, fz_context jarg1_);
  public final static native void fz_rethrow_if(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_rethrow_unless(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_log_error_printf(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native void fz_vlog_error_printf(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3);
  public final static native void fz_log_error(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native void fz_start_throw_on_repair(long jarg1, fz_context jarg1_);
  public final static native void fz_end_throw_on_repair(long jarg1, fz_context jarg1_);
  public final static native void fz_report_error(long jarg1, fz_context jarg1_);
  public final static native void fz_ignore_error(long jarg1, fz_context jarg1_);
  public final static native byte[] fz_convert_error(long jarg1, fz_context jarg1_, long jarg2);
  public final static native void fz_flush_warnings(long jarg1, fz_context jarg1_);
  public final static native void fz_locks_context_user_set(long jarg1, fz_locks_context jarg1_, long jarg2);
  public final static native long fz_locks_context_user_get(long jarg1, fz_locks_context jarg1_);
  public final static native void fz_locks_context_lock_set(long jarg1, fz_locks_context jarg1_, long jarg2);
  public final static native long fz_locks_context_lock_get(long jarg1, fz_locks_context jarg1_);
  public final static native void fz_locks_context_unlock_set(long jarg1, fz_locks_context jarg1_, long jarg2);
  public final static native long fz_locks_context_unlock_get(long jarg1, fz_locks_context jarg1_);
  public final static native long new_fz_locks_context();
  public final static native void delete_fz_locks_context(long jarg1);
  public final static native int FZ_LOCK_ALLOC_get();
  public final static native int FZ_LOCK_FREETYPE_get();
  public final static native int FZ_LOCK_GLYPHCACHE_get();
  public final static native int FZ_LOCK_MAX_get();
  public final static native void fz_assert_lock_held(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_assert_lock_not_held(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_lock_debug_lock(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_lock_debug_unlock(long jarg1, fz_context jarg1_, int jarg2);
  public final static native int FZ_STORE_UNLIMITED_get();
  public final static native int FZ_STORE_DEFAULT_get();
  public final static native long fz_clone_context(long jarg1, fz_context jarg1_);
  public final static native void fz_drop_context(long jarg1, fz_context jarg1_);
  public final static native void fz_set_user_context(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_user_context(long jarg1, fz_context jarg1_);
  public final static native void fz_default_error_callback(long jarg1, byte[] jarg2);
  public final static native void fz_default_warning_callback(long jarg1, byte[] jarg2);
  public final static native void fz_set_error_callback(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_error_callback(long jarg1, fz_context jarg1_, long jarg2);
  public final static native void fz_set_warning_callback(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_warning_callback(long jarg1, fz_context jarg1_, long jarg2);
  public final static native void fz_tune_image_decode(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native void fz_tune_image_scale(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native int fz_aa_level(long jarg1, fz_context jarg1_);
  public final static native void fz_set_aa_level(long jarg1, fz_context jarg1_, int jarg2);
  public final static native int fz_text_aa_level(long jarg1, fz_context jarg1_);
  public final static native void fz_set_text_aa_level(long jarg1, fz_context jarg1_, int jarg2);
  public final static native int fz_graphics_aa_level(long jarg1, fz_context jarg1_);
  public final static native void fz_set_graphics_aa_level(long jarg1, fz_context jarg1_, int jarg2);
  public final static native float fz_graphics_min_line_width(long jarg1, fz_context jarg1_);
  public final static native void fz_set_graphics_min_line_width(long jarg1, fz_context jarg1_, float jarg2);
  public final static native byte[] fz_user_css(long jarg1, fz_context jarg1_);
  public final static native void fz_set_user_css(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native void fz_load_user_css(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native int fz_use_document_css(long jarg1, fz_context jarg1_);
  public final static native void fz_set_use_document_css(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_enable_icc(long jarg1, fz_context jarg1_);
  public final static native void fz_disable_icc(long jarg1, fz_context jarg1_);
  public final static native long fz_malloc(long jarg1, fz_context jarg1_, int jarg2);
  public final static native long fz_calloc(long jarg1, fz_context jarg1_, int jarg2, int jarg3);
  public final static native long fz_realloc(long jarg1, fz_context jarg1_, long jarg2, int jarg3);
  public final static native void fz_free(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_malloc_no_throw(long jarg1, fz_context jarg1_, int jarg2);
  public final static native long fz_calloc_no_throw(long jarg1, fz_context jarg1_, int jarg2, int jarg3);
  public final static native long fz_realloc_no_throw(long jarg1, fz_context jarg1_, long jarg2, int jarg3);
  public final static native long fz_malloc_aligned(long jarg1, fz_context jarg1_, int jarg2, int jarg3);
  public final static native void fz_free_aligned(long jarg1, fz_context jarg1_, long jarg2);
  public final static native byte[] fz_strdup(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native void fz_memrnd(long jarg1, fz_context jarg1_, byte[] jarg2, int jarg3);
  public final static native void fz_string_refs_set(long jarg1, fz_string jarg1_, int jarg2);
  public final static native int fz_string_refs_get(long jarg1, fz_string jarg1_);
  public final static native void fz_string_str_set(long jarg1, fz_string jarg1_, byte[] jarg2);
  public final static native byte[] fz_string_str_get(long jarg1, fz_string jarg1_);
  public final static native long new_fz_string();
  public final static native void delete_fz_string(long jarg1);
  public final static native long fz_new_string(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_keep_string(long jarg1, fz_context jarg1_, long jarg2, fz_string jarg2_);
  public final static native void fz_drop_string(long jarg1, fz_context jarg1_, long jarg2, fz_string jarg2_);
  public final static native void fz_var_imp(long jarg1);
  public final static native long fz_push_try(long jarg1, fz_context jarg1_);
  public final static native int fz_do_try(long jarg1, fz_context jarg1_);
  public final static native int fz_do_always(long jarg1, fz_context jarg1_);
  public final static native int fz_do_catch(long jarg1, fz_context jarg1_);
  public final static native int FZ_JMPBUF_ALIGN_get();
  public final static native void fz_error_stack_slot_buffer_set(long jarg1, fz_error_stack_slot jarg1_, long jarg2);
  public final static native long fz_error_stack_slot_buffer_get(long jarg1, fz_error_stack_slot jarg1_);
  public final static native void fz_error_stack_slot_state_set(long jarg1, fz_error_stack_slot jarg1_, int jarg2);
  public final static native int fz_error_stack_slot_state_get(long jarg1, fz_error_stack_slot jarg1_);
  public final static native void fz_error_stack_slot_code_set(long jarg1, fz_error_stack_slot jarg1_, int jarg2);
  public final static native int fz_error_stack_slot_code_get(long jarg1, fz_error_stack_slot jarg1_);
  public final static native void fz_error_stack_slot_padding_set(long jarg1, fz_error_stack_slot jarg1_, byte[] jarg2);
  public final static native byte[] fz_error_stack_slot_padding_get(long jarg1, fz_error_stack_slot jarg1_);
  public final static native long new_fz_error_stack_slot();
  public final static native void delete_fz_error_stack_slot(long jarg1);
  public final static native void fz_error_context_top_set(long jarg1, fz_error_context jarg1_, long jarg2, fz_error_stack_slot jarg2_);
  public final static native long fz_error_context_top_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_stack_set(long jarg1, fz_error_context jarg1_, long jarg2, fz_error_stack_slot jarg2_);
  public final static native long fz_error_context_stack_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_padding_set(long jarg1, fz_error_context jarg1_, long jarg2, fz_error_stack_slot jarg2_);
  public final static native long fz_error_context_padding_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_stack_base_set(long jarg1, fz_error_context jarg1_, long jarg2, fz_error_stack_slot jarg2_);
  public final static native long fz_error_context_stack_base_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_errcode_set(long jarg1, fz_error_context jarg1_, int jarg2);
  public final static native int fz_error_context_errcode_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_errnum_set(long jarg1, fz_error_context jarg1_, int jarg2);
  public final static native int fz_error_context_errnum_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_print_user_set(long jarg1, fz_error_context jarg1_, long jarg2);
  public final static native long fz_error_context_print_user_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_print_set(long jarg1, fz_error_context jarg1_, long jarg2);
  public final static native long fz_error_context_print_get(long jarg1, fz_error_context jarg1_);
  public final static native void fz_error_context_message_set(long jarg1, fz_error_context jarg1_, byte[] jarg2);
  public final static native byte[] fz_error_context_message_get(long jarg1, fz_error_context jarg1_);
  public final static native long new_fz_error_context();
  public final static native void delete_fz_error_context(long jarg1);
  public final static native void fz_warn_context_print_user_set(long jarg1, fz_warn_context jarg1_, long jarg2);
  public final static native long fz_warn_context_print_user_get(long jarg1, fz_warn_context jarg1_);
  public final static native void fz_warn_context_print_set(long jarg1, fz_warn_context jarg1_, long jarg2);
  public final static native long fz_warn_context_print_get(long jarg1, fz_warn_context jarg1_);
  public final static native void fz_warn_context_count_set(long jarg1, fz_warn_context jarg1_, int jarg2);
  public final static native int fz_warn_context_count_get(long jarg1, fz_warn_context jarg1_);
  public final static native void fz_warn_context_message_set(long jarg1, fz_warn_context jarg1_, byte[] jarg2);
  public final static native byte[] fz_warn_context_message_get(long jarg1, fz_warn_context jarg1_);
  public final static native long new_fz_warn_context();
  public final static native void delete_fz_warn_context(long jarg1);
  public final static native void fz_aa_context_hscale_set(long jarg1, fz_aa_context jarg1_, int jarg2);
  public final static native int fz_aa_context_hscale_get(long jarg1, fz_aa_context jarg1_);
  public final static native void fz_aa_context_vscale_set(long jarg1, fz_aa_context jarg1_, int jarg2);
  public final static native int fz_aa_context_vscale_get(long jarg1, fz_aa_context jarg1_);
  public final static native void fz_aa_context_scale_set(long jarg1, fz_aa_context jarg1_, int jarg2);
  public final static native int fz_aa_context_scale_get(long jarg1, fz_aa_context jarg1_);
  public final static native void fz_aa_context_bits_set(long jarg1, fz_aa_context jarg1_, int jarg2);
  public final static native int fz_aa_context_bits_get(long jarg1, fz_aa_context jarg1_);
  public final static native void fz_aa_context_text_bits_set(long jarg1, fz_aa_context jarg1_, int jarg2);
  public final static native int fz_aa_context_text_bits_get(long jarg1, fz_aa_context jarg1_);
  public final static native void fz_aa_context_min_line_width_set(long jarg1, fz_aa_context jarg1_, float jarg2);
  public final static native float fz_aa_context_min_line_width_get(long jarg1, fz_aa_context jarg1_);
  public final static native long new_fz_aa_context();
  public final static native void delete_fz_aa_context(long jarg1);
  public final static native void fz_context_user_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_user_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_alloc_set(long jarg1, fz_context jarg1_, long jarg2, fz_alloc_context jarg2_);
  public final static native long fz_context_alloc_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_locks_set(long jarg1, fz_context jarg1_, long jarg2, fz_locks_context jarg2_);
  public final static native long fz_context_locks_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_error_set(long jarg1, fz_context jarg1_, long jarg2, fz_error_context jarg2_);
  public final static native long fz_context_error_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_warn_set(long jarg1, fz_context jarg1_, long jarg2, fz_warn_context jarg2_);
  public final static native long fz_context_warn_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_aa_set(long jarg1, fz_context jarg1_, long jarg2, fz_aa_context jarg2_);
  public final static native long fz_context_aa_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_seed48_set(long jarg1, fz_context jarg1_, int[] jarg2);
  public final static native int[] fz_context_seed48_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_throw_on_repair_set(long jarg1, fz_context jarg1_, int jarg2);
  public final static native int fz_context_throw_on_repair_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_handler_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_handler_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_archive_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_archive_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_style_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_style_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_tuning_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_tuning_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_stddbg_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_stddbg_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_font_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_font_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_colorspace_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_colorspace_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_store_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_store_get(long jarg1, fz_context jarg1_);
  public final static native void fz_context_glyph_cache_set(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_context_glyph_cache_get(long jarg1, fz_context jarg1_);
  public final static native long new_fz_context();
  public final static native void delete_fz_context(long jarg1);
  public final static native long fz_new_context_imp(long jarg1, fz_alloc_context jarg1_, long jarg2, fz_locks_context jarg2_, int jarg3, byte[] jarg4);
  public final static native void fz_lock(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_unlock(long jarg1, fz_context jarg1_, int jarg2);
  public final static native long fz_keep_imp(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_keep_imp_locked(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_keep_imp8_locked(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_keep_imp8(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_keep_imp16(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native int fz_drop_imp(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native int fz_drop_imp8(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native int fz_drop_imp16(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native int fz_file_exists(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_open_file(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_open_file_autodelete(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_try_open_file(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native byte[] fz_stream_filename(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native long fz_open_memory(long jarg1, fz_context jarg1_, byte[] jarg2, int jarg3);
  public final static native long fz_open_buffer(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_open_leecher(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, long jarg3);
  public final static native long fz_keep_stream(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native void fz_drop_stream(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native long fz_tell(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native void fz_seek(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, long jarg3, int jarg4);
  public final static native int fz_read(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, byte[] jarg3, int jarg4);
  public final static native int fz_skip(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3);
  public final static native long fz_read_all(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3);
  public final static native long fz_read_file(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_try_read_file(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native int fz_read_uint16(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint24(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint32(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint64(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint16_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint24_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint32_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_uint64_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native short fz_read_int16(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_int32(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native long fz_read_int64(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native short fz_read_int16_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_int32_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native long fz_read_int64_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native float fz_read_float_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native float fz_read_float(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native void fz_read_string(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, byte[] jarg3, int jarg4);
  public final static native int fz_read_rune(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_utf16_le(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_read_utf16_be(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native void fz_stream_refs_set(long jarg1, fz_stream jarg1_, int jarg2);
  public final static native int fz_stream_refs_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_error_set(long jarg1, fz_stream jarg1_, int jarg2);
  public final static native int fz_stream_error_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_eof_set(long jarg1, fz_stream jarg1_, int jarg2);
  public final static native int fz_stream_eof_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_progressive_set(long jarg1, fz_stream jarg1_, int jarg2);
  public final static native int fz_stream_progressive_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_pos_set(long jarg1, fz_stream jarg1_, long jarg2);
  public final static native long fz_stream_pos_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_avail_set(long jarg1, fz_stream jarg1_, int jarg2);
  public final static native int fz_stream_avail_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_bits_set(long jarg1, fz_stream jarg1_, int jarg2);
  public final static native int fz_stream_bits_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_rp_set(long jarg1, fz_stream jarg1_, byte[] jarg2);
  public final static native byte[] fz_stream_rp_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_wp_set(long jarg1, fz_stream jarg1_, byte[] jarg2);
  public final static native byte[] fz_stream_wp_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_state_set(long jarg1, fz_stream jarg1_, long jarg2);
  public final static native long fz_stream_state_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_next_set(long jarg1, fz_stream jarg1_, long jarg2);
  public final static native long fz_stream_next_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_drop_set(long jarg1, fz_stream jarg1_, long jarg2);
  public final static native long fz_stream_drop_get(long jarg1, fz_stream jarg1_);
  public final static native void fz_stream_seek_set(long jarg1, fz_stream jarg1_, long jarg2);
  public final static native long fz_stream_seek_get(long jarg1, fz_stream jarg1_);
  public final static native long new_fz_stream();
  public final static native void delete_fz_stream(long jarg1);
  public final static native long fz_new_stream(long jarg1, fz_context jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long fz_read_best(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3, long jarg4, int jarg5);
  public final static native byte[] fz_read_line(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, byte[] jarg3, int jarg4);
  public final static native int fz_skip_string(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, byte[] jarg3);
  public final static native void fz_skip_space(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_available(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3);
  public final static native int fz_read_byte(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_peek_byte(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native void fz_unread_byte(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_is_eof(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native long fz_read_bits(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3);
  public final static native long fz_read_rbits(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3);
  public final static native void fz_sync_bits(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native int fz_is_eof_bits(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_);
  public final static native long fz_open_file_ptr_no_close(long jarg1, fz_context jarg1_, long jarg2);
  public final static native int fz_box_type_from_string(byte[] jarg1);
  public final static native byte[] fz_string_from_box_type(int jarg1);
  public final static native long fz_make_location(int jarg1, int jarg2);
  public final static native int FZ_LAYOUT_KINDLE_W_get();
  public final static native int FZ_LAYOUT_KINDLE_H_get();
  public final static native int FZ_LAYOUT_KINDLE_EM_get();
  public final static native int FZ_LAYOUT_US_POCKET_W_get();
  public final static native int FZ_LAYOUT_US_POCKET_H_get();
  public final static native int FZ_LAYOUT_US_POCKET_EM_get();
  public final static native int FZ_LAYOUT_US_TRADE_W_get();
  public final static native int FZ_LAYOUT_US_TRADE_H_get();
  public final static native int FZ_LAYOUT_US_TRADE_EM_get();
  public final static native int FZ_LAYOUT_UK_A_FORMAT_W_get();
  public final static native int FZ_LAYOUT_UK_A_FORMAT_H_get();
  public final static native int FZ_LAYOUT_UK_A_FORMAT_EM_get();
  public final static native int FZ_LAYOUT_UK_B_FORMAT_W_get();
  public final static native int FZ_LAYOUT_UK_B_FORMAT_H_get();
  public final static native int FZ_LAYOUT_UK_B_FORMAT_EM_get();
  public final static native int FZ_LAYOUT_UK_C_FORMAT_W_get();
  public final static native int FZ_LAYOUT_UK_C_FORMAT_H_get();
  public final static native int FZ_LAYOUT_UK_C_FORMAT_EM_get();
  public final static native int FZ_LAYOUT_A5_W_get();
  public final static native int FZ_LAYOUT_A5_H_get();
  public final static native int FZ_LAYOUT_A5_EM_get();
  public final static native int FZ_DEFAULT_LAYOUT_W_get();
  public final static native int FZ_DEFAULT_LAYOUT_H_get();
  public final static native int FZ_DEFAULT_LAYOUT_EM_get();
  public final static native int FZ_PERMISSION_PRINT_get();
  public final static native int FZ_PERMISSION_COPY_get();
  public final static native int FZ_PERMISSION_EDIT_get();
  public final static native int FZ_PERMISSION_ANNOTATE_get();
  public final static native int FZ_PERMISSION_FORM_get();
  public final static native int FZ_PERMISSION_ACCESSIBILITY_get();
  public final static native int FZ_PERMISSION_ASSEMBLE_get();
  public final static native int FZ_PERMISSION_PRINT_HQ_get();
  public final static native void fz_register_document_handler(long jarg1, fz_context jarg1_, long jarg2, fz_document_handler jarg2_);
  public final static native void fz_register_document_handlers(long jarg1, fz_context jarg1_);
  public final static native long fz_recognize_document(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_recognize_document_content(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_recognize_document_stream_content(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, byte[] jarg3);
  public final static native long fz_recognize_document_stream_and_dir_content(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, long jarg3, byte[] jarg4);
  public final static native long fz_open_document(long jarg1, fz_context jarg1_, byte[] jarg2);
  public final static native long fz_open_accelerated_document(long jarg1, fz_context jarg1_, byte[] jarg2, byte[] jarg3);
  public final static native long fz_open_document_with_stream(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3, fz_stream jarg3_);
  public final static native long fz_open_document_with_stream_and_dir(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3, fz_stream jarg3_, long jarg4);
  public final static native long fz_open_document_with_buffer(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3);
  public final static native long fz_open_accelerated_document_with_stream(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3, fz_stream jarg3_, long jarg4, fz_stream jarg4_);
  public final static native long fz_open_accelerated_document_with_stream_and_dir(long jarg1, fz_context jarg1_, byte[] jarg2, long jarg3, fz_stream jarg3_, long jarg4, fz_stream jarg4_, long jarg5);
  public final static native int fz_document_supports_accelerator(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native void fz_save_accelerator(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, byte[] jarg3);
  public final static native void fz_output_accelerator(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_new_document_of_size(long jarg1, fz_context jarg1_, int jarg2);
  public final static native long fz_keep_document(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native void fz_drop_document(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native int fz_needs_password(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native int fz_authenticate_password(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, byte[] jarg3);
  public final static native long fz_load_outline(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native long fz_new_outline_iterator(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native int fz_is_document_reflowable(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native void fz_layout_document(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, float jarg3, float jarg4, float jarg5);
  public final static native int fz_make_bookmark(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_lookup_bookmark(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3);
  public final static native int fz_count_pages(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native long fz_resolve_link_dest(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, byte[] jarg3);
  public final static native byte[] fz_format_link_uri(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_resolve_link(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, byte[] jarg3, long jarg4, long jarg5);
  public final static native void fz_run_document_structure(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3, fz_device jarg3_, long jarg4, fz_cookie jarg4_);
  public final static native long fz_last_page(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native long fz_next_page(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_previous_page(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_clamp_location(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_location_from_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3);
  public final static native int fz_page_number_from_location(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_load_page(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3);
  public final static native int fz_count_chapters(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native int fz_count_chapter_pages(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3);
  public final static native long fz_load_chapter_page(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, int jarg4);
  public final static native long fz_load_links(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_new_page_of_size(long jarg1, fz_context jarg1_, int jarg2, long jarg3, fz_document jarg3_);
  public final static native long fz_bound_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_bound_page_box(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, int jarg3);
  public final static native void fz_run_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_device jarg3_, long jarg4, fz_matrix jarg4_, long jarg5, fz_cookie jarg5_);
  public final static native void fz_run_page_contents(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_device jarg3_, long jarg4, fz_matrix jarg4_, long jarg5, fz_cookie jarg5_);
  public final static native void fz_run_page_annots(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_device jarg3_, long jarg4, fz_matrix jarg4_, long jarg5, fz_cookie jarg5_);
  public final static native void fz_run_page_widgets(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_device jarg3_, long jarg4, fz_matrix jarg4_, long jarg5, fz_cookie jarg5_);
  public final static native long fz_keep_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native void fz_drop_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_page_presentation(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, long jarg4);
  public final static native byte[] fz_page_label(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, byte[] jarg3, int jarg4);
  public final static native int fz_has_permission(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3);
  public final static native int fz_lookup_metadata(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, byte[] jarg3, byte[] jarg4, int jarg5);
  public final static native byte[] FZ_META_FORMAT_get();
  public final static native byte[] FZ_META_ENCRYPTION_get();
  public final static native byte[] FZ_META_INFO_get();
  public final static native byte[] FZ_META_INFO_TITLE_get();
  public final static native byte[] FZ_META_INFO_AUTHOR_get();
  public final static native byte[] FZ_META_INFO_SUBJECT_get();
  public final static native byte[] FZ_META_INFO_KEYWORDS_get();
  public final static native byte[] FZ_META_INFO_CREATOR_get();
  public final static native byte[] FZ_META_INFO_PRODUCER_get();
  public final static native byte[] FZ_META_INFO_CREATIONDATE_get();
  public final static native byte[] FZ_META_INFO_MODIFICATIONDATE_get();
  public final static native void fz_set_metadata(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, byte[] jarg3, byte[] jarg4);
  public final static native long fz_document_output_intent(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_);
  public final static native long fz_page_separations(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native int fz_page_uses_overprint(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_create_link(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_rect jarg3_, byte[] jarg4);
  public final static native void fz_delete_link(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3);
  public final static native long fz_process_opened_pages(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3, long jarg4);
  public final static native void fz_page_refs_set(long jarg1, fz_page jarg1_, int jarg2);
  public final static native int fz_page_refs_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_doc_set(long jarg1, fz_page jarg1_, long jarg2, fz_document jarg2_);
  public final static native long fz_page_doc_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_chapter_set(long jarg1, fz_page jarg1_, int jarg2);
  public final static native int fz_page_chapter_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_number_set(long jarg1, fz_page jarg1_, int jarg2);
  public final static native int fz_page_number_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_incomplete_set(long jarg1, fz_page jarg1_, int jarg2);
  public final static native int fz_page_incomplete_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_drop_page_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_drop_page_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_bound_page_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_bound_page_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_run_page_contents_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_run_page_contents_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_run_page_annots_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_run_page_annots_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_run_page_widgets_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_run_page_widgets_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_load_links_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_load_links_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_page_presentation_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_page_presentation_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_control_separation_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_control_separation_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_separation_disabled_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_separation_disabled_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_separations_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_separations_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_overprint_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_overprint_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_create_link_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_create_link_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_delete_link_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_delete_link_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_prev_set(long jarg1, fz_page jarg1_, long jarg2);
  public final static native long fz_page_prev_get(long jarg1, fz_page jarg1_);
  public final static native void fz_page_next_set(long jarg1, fz_page jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_page_next_get(long jarg1, fz_page jarg1_);
  public final static native long new_fz_page();
  public final static native void delete_fz_page(long jarg1);
  public final static native void fz_document_refs_set(long jarg1, fz_document jarg1_, int jarg2);
  public final static native int fz_document_refs_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_drop_document_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_drop_document_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_needs_password_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_needs_password_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_authenticate_password_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_authenticate_password_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_has_permission_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_has_permission_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_load_outline_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_load_outline_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_outline_iterator_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_outline_iterator_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_layout_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_layout_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_make_bookmark_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_make_bookmark_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_lookup_bookmark_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_lookup_bookmark_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_resolve_link_dest_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_resolve_link_dest_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_format_link_uri_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_format_link_uri_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_count_chapters_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_count_chapters_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_count_pages_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_count_pages_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_load_page_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_load_page_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_page_label_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_page_label_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_lookup_metadata_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_lookup_metadata_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_set_metadata_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_set_metadata_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_get_output_intent_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_get_output_intent_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_output_accelerator_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_output_accelerator_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_run_structure_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_run_structure_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_as_pdf_set(long jarg1, fz_document jarg1_, long jarg2);
  public final static native long fz_document_as_pdf_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_did_layout_set(long jarg1, fz_document jarg1_, int jarg2);
  public final static native int fz_document_did_layout_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_is_reflowable_set(long jarg1, fz_document jarg1_, int jarg2);
  public final static native int fz_document_is_reflowable_get(long jarg1, fz_document jarg1_);
  public final static native void fz_document_open_set(long jarg1, fz_document jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_document_open_get(long jarg1, fz_document jarg1_);
  public final static native long new_fz_document();
  public final static native void delete_fz_document(long jarg1);
  public final static native void fz_document_handler_recognize_set(long jarg1, fz_document_handler jarg1_, long jarg2);
  public final static native long fz_document_handler_recognize_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_open_set(long jarg1, fz_document_handler jarg1_, long jarg2);
  public final static native long fz_document_handler_open_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_extensions_set(long jarg1, fz_document_handler jarg1_, long jarg2);
  public final static native long fz_document_handler_extensions_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_mimetypes_set(long jarg1, fz_document_handler jarg1_, long jarg2);
  public final static native long fz_document_handler_mimetypes_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_recognize_content_set(long jarg1, fz_document_handler jarg1_, long jarg2);
  public final static native long fz_document_handler_recognize_content_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_wants_dir_set(long jarg1, fz_document_handler jarg1_, int jarg2);
  public final static native int fz_document_handler_wants_dir_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_wants_file_set(long jarg1, fz_document_handler jarg1_, int jarg2);
  public final static native int fz_document_handler_wants_file_get(long jarg1, fz_document_handler jarg1_);
  public final static native void fz_document_handler_fin_set(long jarg1, fz_document_handler jarg1_, long jarg2);
  public final static native long fz_document_handler_fin_get(long jarg1, fz_document_handler jarg1_);
  public final static native long new_fz_document_handler();
  public final static native void delete_fz_document_handler(long jarg1);
  public final static native long fz_new_display_list_from_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_new_display_list_from_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3);
  public final static native long fz_new_display_list_from_page_contents(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_);
  public final static native long fz_new_pixmap_from_display_list(long jarg1, fz_context jarg1_, long jarg2, long jarg3, fz_matrix jarg3_, long jarg4, fz_colorspace jarg4_, int jarg5);
  public final static native long fz_new_pixmap_from_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_matrix jarg3_, long jarg4, fz_colorspace jarg4_, int jarg5);
  public final static native long fz_new_pixmap_from_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, long jarg4, fz_matrix jarg4_, long jarg5, fz_colorspace jarg5_, int jarg6);
  public final static native long fz_new_pixmap_from_page_contents(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_matrix jarg3_, long jarg4, fz_colorspace jarg4_, int jarg5);
  public final static native long fz_new_pixmap_from_display_list_with_separations(long jarg1, fz_context jarg1_, long jarg2, long jarg3, fz_matrix jarg3_, long jarg4, fz_colorspace jarg4_, long jarg5, int jarg6);
  public final static native long fz_new_pixmap_from_page_with_separations(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_matrix jarg3_, long jarg4, fz_colorspace jarg4_, long jarg5, int jarg6);
  public final static native long fz_new_pixmap_from_page_number_with_separations(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, long jarg4, fz_matrix jarg4_, long jarg5, fz_colorspace jarg5_, long jarg6, int jarg7);
  public final static native long fz_new_pixmap_from_page_contents_with_separations(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3, fz_matrix jarg3_, long jarg4, fz_colorspace jarg4_, long jarg5, int jarg6);
  public final static native long fz_fill_pixmap_from_display_list(long jarg1, fz_context jarg1_, long jarg2, long jarg3, fz_matrix jarg3_, long jarg4, fz_pixmap jarg4_);
  public final static native long fz_new_stext_page_from_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3);
  public final static native long fz_new_stext_page_from_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, long jarg4);
  public final static native long fz_new_stext_page_from_chapter_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, int jarg4, long jarg5);
  public final static native long fz_new_stext_page_from_display_list(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native long fz_new_buffer_from_stext_page(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_new_buffer_from_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, long jarg3);
  public final static native long fz_new_buffer_from_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, long jarg4);
  public final static native long fz_new_buffer_from_display_list(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native int fz_search_page(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, byte[] jarg3, long jarg4, long jarg5, fz_quad jarg5_, int jarg6);
  public final static native int fz_search_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, byte[] jarg4, long jarg5, long jarg6, fz_quad jarg6_, int jarg7);
  public final static native int fz_search_chapter_page_number(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, int jarg4, byte[] jarg5, long jarg6, long jarg7, fz_quad jarg7_, int jarg8);
  public final static native int fz_search_display_list(long jarg1, fz_context jarg1_, long jarg2, byte[] jarg3, long jarg4, long jarg5, fz_quad jarg5_, int jarg6);
  public final static native int fz_search_page_cb(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, byte[] jarg3, long jarg4, long jarg5);
  public final static native int fz_search_page_number_cb(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, byte[] jarg4, long jarg5, long jarg6);
  public final static native int fz_search_chapter_page_number_cb(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, int jarg3, int jarg4, byte[] jarg5, long jarg6, long jarg7);
  public final static native int fz_search_display_list_cb(long jarg1, fz_context jarg1_, long jarg2, byte[] jarg3, long jarg4, long jarg5);
  public final static native long fz_new_display_list_from_svg(long jarg1, fz_context jarg1_, long jarg2, byte[] jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long fz_new_image_from_svg(long jarg1, fz_context jarg1_, long jarg2, byte[] jarg3, long jarg4);
  public final static native long fz_new_display_list_from_svg_xml(long jarg1, fz_context jarg1_, long jarg2, long jarg3, byte[] jarg4, long jarg5, long jarg6, long jarg7);
  public final static native long fz_new_image_from_svg_xml(long jarg1, fz_context jarg1_, long jarg2, long jarg3, byte[] jarg4, long jarg5);
  public final static native void fz_write_image_as_data_uri(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native void fz_write_pixmap_as_data_uri(long jarg1, fz_context jarg1_, long jarg2, long jarg3, fz_pixmap jarg3_);
  public final static native void fz_append_image_as_data_uri(long jarg1, fz_context jarg1_, long jarg2, long jarg3);
  public final static native void fz_append_pixmap_as_data_uri(long jarg1, fz_context jarg1_, long jarg2, long jarg3, fz_pixmap jarg3_);
  public final static native long fz_new_xhtml_document_from_document(long jarg1, fz_context jarg1_, long jarg2, fz_document jarg2_, long jarg3);
  public final static native long fz_new_buffer_from_page_with_format(long jarg1, fz_context jarg1_, long jarg2, fz_page jarg2_, byte[] jarg3, byte[] jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_cookie jarg6_);
  public final static native double M_PI_get();
  public final static native int fz_mul255(int jarg1, int jarg2);
  public final static native int fz_div255(int jarg1, int jarg2);
  public final static native float fz_atof(byte[] jarg1);
  public final static native int fz_atoi(byte[] jarg1);
  public final static native long fz_atoi64(byte[] jarg1);
  public final static native int fz_atoz(byte[] jarg1);
  public final static native float fz_abs(float jarg1);
  public final static native int fz_absi(int jarg1);
  public final static native float fz_min(float jarg1, float jarg2);
  public final static native int fz_mini(int jarg1, int jarg2);
  public final static native int fz_minz(int jarg1, int jarg2);
  public final static native long fz_mini64(long jarg1, long jarg2);
  public final static native float fz_max(float jarg1, float jarg2);
  public final static native int fz_maxi(int jarg1, int jarg2);
  public final static native int fz_maxz(int jarg1, int jarg2);
  public final static native long fz_maxi64(long jarg1, long jarg2);
  public final static native float fz_clamp(float jarg1, float jarg2, float jarg3);
  public final static native int fz_clampi(int jarg1, int jarg2, int jarg3);
  public final static native long fz_clamp64(long jarg1, long jarg2, long jarg3);
  public final static native double fz_clampd(double jarg1, double jarg2, double jarg3);
  public final static native long fz_clampp(long jarg1, long jarg2, long jarg3);
  public final static native void fz_point_x_set(long jarg1, fz_point jarg1_, float jarg2);
  public final static native float fz_point_x_get(long jarg1, fz_point jarg1_);
  public final static native void fz_point_y_set(long jarg1, fz_point jarg1_, float jarg2);
  public final static native float fz_point_y_get(long jarg1, fz_point jarg1_);
  public final static native long new_fz_point();
  public final static native void delete_fz_point(long jarg1);
  public final static native long fz_make_point(float jarg1, float jarg2);
  public final static native void fz_rect_x0_set(long jarg1, fz_rect jarg1_, float jarg2);
  public final static native float fz_rect_x0_get(long jarg1, fz_rect jarg1_);
  public final static native void fz_rect_y0_set(long jarg1, fz_rect jarg1_, float jarg2);
  public final static native float fz_rect_y0_get(long jarg1, fz_rect jarg1_);
  public final static native void fz_rect_x1_set(long jarg1, fz_rect jarg1_, float jarg2);
  public final static native float fz_rect_x1_get(long jarg1, fz_rect jarg1_);
  public final static native void fz_rect_y1_set(long jarg1, fz_rect jarg1_, float jarg2);
  public final static native float fz_rect_y1_get(long jarg1, fz_rect jarg1_);
  public final static native long new_fz_rect();
  public final static native void delete_fz_rect(long jarg1);
  public final static native long fz_make_rect(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native void fz_irect_x0_set(long jarg1, fz_irect jarg1_, int jarg2);
  public final static native int fz_irect_x0_get(long jarg1, fz_irect jarg1_);
  public final static native void fz_irect_y0_set(long jarg1, fz_irect jarg1_, int jarg2);
  public final static native int fz_irect_y0_get(long jarg1, fz_irect jarg1_);
  public final static native void fz_irect_x1_set(long jarg1, fz_irect jarg1_, int jarg2);
  public final static native int fz_irect_x1_get(long jarg1, fz_irect jarg1_);
  public final static native void fz_irect_y1_set(long jarg1, fz_irect jarg1_, int jarg2);
  public final static native int fz_irect_y1_get(long jarg1, fz_irect jarg1_);
  public final static native long new_fz_irect();
  public final static native void delete_fz_irect(long jarg1);
  public final static native long fz_make_irect(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long fz_unit_rect_get();
  public final static native long fz_empty_rect_get();
  public final static native long fz_empty_irect_get();
  public final static native long fz_infinite_rect_get();
  public final static native long fz_infinite_irect_get();
  public final static native int fz_is_empty_rect(long jarg1, fz_rect jarg1_);
  public final static native int fz_is_empty_irect(long jarg1, fz_irect jarg1_);
  public final static native int fz_is_infinite_rect(long jarg1, fz_rect jarg1_);
  public final static native int fz_is_infinite_irect(long jarg1, fz_irect jarg1_);
  public final static native int fz_is_valid_rect(long jarg1, fz_rect jarg1_);
  public final static native int fz_is_valid_irect(long jarg1, fz_irect jarg1_);
  public final static native long fz_irect_width(long jarg1, fz_irect jarg1_);
  public final static native int fz_irect_height(long jarg1, fz_irect jarg1_);
  public final static native void fz_matrix_a_set(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native float fz_matrix_a_get(long jarg1, fz_matrix jarg1_);
  public final static native void fz_matrix_b_set(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native float fz_matrix_b_get(long jarg1, fz_matrix jarg1_);
  public final static native void fz_matrix_c_set(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native float fz_matrix_c_get(long jarg1, fz_matrix jarg1_);
  public final static native void fz_matrix_d_set(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native float fz_matrix_d_get(long jarg1, fz_matrix jarg1_);
  public final static native void fz_matrix_e_set(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native float fz_matrix_e_get(long jarg1, fz_matrix jarg1_);
  public final static native void fz_matrix_f_set(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native float fz_matrix_f_get(long jarg1, fz_matrix jarg1_);
  public final static native long new_fz_matrix();
  public final static native void delete_fz_matrix(long jarg1);
  public final static native long fz_identity_get();
  public final static native long fz_make_matrix(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native int fz_is_identity(long jarg1, fz_matrix jarg1_);
  public final static native long fz_concat(long jarg1, fz_matrix jarg1_, long jarg2, fz_matrix jarg2_);
  public final static native long fz_scale(float jarg1, float jarg2);
  public final static native long fz_pre_scale(long jarg1, fz_matrix jarg1_, float jarg2, float jarg3);
  public final static native long fz_post_scale(long jarg1, fz_matrix jarg1_, float jarg2, float jarg3);
  public final static native long fz_shear(float jarg1, float jarg2);
  public final static native long fz_pre_shear(long jarg1, fz_matrix jarg1_, float jarg2, float jarg3);
  public final static native long fz_rotate(float jarg1);
  public final static native long fz_pre_rotate(long jarg1, fz_matrix jarg1_, float jarg2);
  public final static native long fz_translate(float jarg1, float jarg2);
  public final static native long fz_pre_translate(long jarg1, fz_matrix jarg1_, float jarg2, float jarg3);
  public final static native long fz_transform_page(long jarg1, fz_rect jarg1_, float jarg2, float jarg3);
  public final static native long fz_invert_matrix(long jarg1, fz_matrix jarg1_);
  public final static native int fz_try_invert_matrix(long jarg1, fz_matrix jarg1_, long jarg2, fz_matrix jarg2_);
  public final static native int fz_is_rectilinear(long jarg1, fz_matrix jarg1_);
  public final static native float fz_matrix_expansion(long jarg1, fz_matrix jarg1_);
  public final static native long fz_intersect_rect(long jarg1, fz_rect jarg1_, long jarg2, fz_rect jarg2_);
  public final static native long fz_intersect_irect(long jarg1, fz_irect jarg1_, long jarg2, fz_irect jarg2_);
  public final static native long fz_union_rect(long jarg1, fz_rect jarg1_, long jarg2, fz_rect jarg2_);
  public final static native long fz_irect_from_rect(long jarg1, fz_rect jarg1_);
  public final static native long fz_round_rect(long jarg1, fz_rect jarg1_);
  public final static native long fz_rect_from_irect(long jarg1, fz_irect jarg1_);
  public final static native long fz_expand_rect(long jarg1, fz_rect jarg1_, float jarg2);
  public final static native long fz_expand_irect(long jarg1, fz_irect jarg1_, int jarg2);
  public final static native long fz_include_point_in_rect(long jarg1, fz_rect jarg1_, long jarg2, fz_point jarg2_);
  public final static native long fz_translate_rect(long jarg1, fz_rect jarg1_, float jarg2, float jarg3);
  public final static native long fz_translate_irect(long jarg1, fz_irect jarg1_, int jarg2, int jarg3);
  public final static native int fz_contains_rect(long jarg1, fz_rect jarg1_, long jarg2, fz_rect jarg2_);
  public final static native long fz_transform_point(long jarg1, fz_point jarg1_, long jarg2, fz_matrix jarg2_);
  public final static native long fz_transform_point_xy(float jarg1, float jarg2, long jarg3, fz_matrix jarg3_);
  public final static native long fz_transform_vector(long jarg1, fz_point jarg1_, long jarg2, fz_matrix jarg2_);
  public final static native long fz_transform_rect(long jarg1, fz_rect jarg1_, long jarg2, fz_matrix jarg2_);
  public final static native long fz_normalize_vector(long jarg1, fz_point jarg1_);
  public final static native long fz_gridfit_matrix(int jarg1, long jarg2, fz_matrix jarg2_);
  public final static native float fz_matrix_max_expansion(long jarg1, fz_matrix jarg1_);
  public final static native void fz_quad_ul_set(long jarg1, fz_quad jarg1_, long jarg2, fz_point jarg2_);
  public final static native long fz_quad_ul_get(long jarg1, fz_quad jarg1_);
  public final static native void fz_quad_ur_set(long jarg1, fz_quad jarg1_, long jarg2, fz_point jarg2_);
  public final static native long fz_quad_ur_get(long jarg1, fz_quad jarg1_);
  public final static native void fz_quad_ll_set(long jarg1, fz_quad jarg1_, long jarg2, fz_point jarg2_);
  public final static native long fz_quad_ll_get(long jarg1, fz_quad jarg1_);
  public final static native void fz_quad_lr_set(long jarg1, fz_quad jarg1_, long jarg2, fz_point jarg2_);
  public final static native long fz_quad_lr_get(long jarg1, fz_quad jarg1_);
  public final static native long new_fz_quad();
  public final static native void delete_fz_quad(long jarg1);
  public final static native long fz_make_quad(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native long fz_invalid_quad_get();
  public final static native long fz_infinite_quad_get();
  public final static native int fz_is_valid_quad(long jarg1, fz_quad jarg1_);
  public final static native int fz_is_empty_quad(long jarg1, fz_quad jarg1_);
  public final static native int fz_is_infinite_quad(long jarg1, fz_quad jarg1_);
  public final static native long fz_quad_from_rect(long jarg1, fz_rect jarg1_);
  public final static native long fz_rect_from_quad(long jarg1, fz_quad jarg1_);
  public final static native long fz_transform_quad(long jarg1, fz_quad jarg1_, long jarg2, fz_matrix jarg2_);
  public final static native int fz_is_point_inside_quad(long jarg1, fz_point jarg1_, long jarg2, fz_quad jarg2_);
  public final static native int fz_is_point_inside_rect(long jarg1, fz_point jarg1_, long jarg2, fz_rect jarg2_);
  public final static native int fz_is_point_inside_irect(int jarg1, int jarg2, long jarg3, fz_irect jarg3_);
  public final static native int fz_is_quad_inside_quad(long jarg1, fz_quad jarg1_, long jarg2, fz_quad jarg2_);
  public final static native int fz_is_quad_intersecting_quad(long jarg1, fz_quad jarg1_, long jarg2, fz_quad jarg2_);
  public final static native int FZ_RI_PERCEPTUAL_get();
  public final static native int FZ_RI_RELATIVE_COLORIMETRIC_get();
  public final static native int FZ_RI_SATURATION_get();
  public final static native int FZ_RI_ABSOLUTE_COLORIMETRIC_get();
  public final static native void fz_color_params_ri_set(long jarg1, fz_color_params jarg1_, short jarg2);
  public final static native short fz_color_params_ri_get(long jarg1, fz_color_params jarg1_);
  public final static native void fz_color_params_bp_set(long jarg1, fz_color_params jarg1_, short jarg2);
  public final static native short fz_color_params_bp_get(long jarg1, fz_color_params jarg1_);
  public final static native void fz_color_params_op_set(long jarg1, fz_color_params jarg1_, short jarg2);
  public final static native short fz_color_params_op_get(long jarg1, fz_color_params jarg1_);
  public final static native void fz_color_params_opm_set(long jarg1, fz_color_params jarg1_, short jarg2);
  public final static native short fz_color_params_opm_get(long jarg1, fz_color_params jarg1_);
  public final static native long new_fz_color_params();
  public final static native void delete_fz_color_params(long jarg1);
  public final static native long fz_default_color_params_get();
  public final static native int fz_lookup_rendering_intent(byte[] jarg1);
  public final static native byte[] fz_rendering_intent_name(int jarg1);
  public final static native int FZ_MAX_COLORS_get();
  public final static native int FZ_COLORSPACE_IS_DEVICE_get();
  public final static native int FZ_COLORSPACE_IS_ICC_get();
  public final static native int FZ_COLORSPACE_HAS_CMYK_get();
  public final static native int FZ_COLORSPACE_HAS_SPOTS_get();
  public final static native int FZ_COLORSPACE_HAS_CMYK_AND_SPOTS_get();
  public final static native long fz_new_colorspace(long jarg1, fz_context jarg1_, int jarg2, int jarg3, int jarg4, byte[] jarg5);
  public final static native long fz_keep_colorspace(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native void fz_drop_colorspace(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_new_indexed_colorspace(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, int jarg3, byte[] jarg4);
  public final static native long fz_new_icc_colorspace(long jarg1, fz_context jarg1_, int jarg2, int jarg3, byte[] jarg4, long jarg5);
  public final static native long fz_new_cal_gray_colorspace(long jarg1, fz_context jarg1_, float[] jarg2, float[] jarg3, float jarg4);
  public final static native long fz_new_cal_rgb_colorspace(long jarg1, fz_context jarg1_, float[] jarg2, float[] jarg3, float[] jarg4, float[] jarg5);
  public final static native byte[] fz_colorspace_name(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_n(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_subtractive(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_device_n_has_only_cmyk(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_device_n_has_cmyk(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_gray(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_rgb(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_cmyk(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_lab(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_indexed(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_device_n(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_device(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_device_gray(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_device_cmyk(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_colorspace_is_lab_icc(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native int fz_is_valid_blend_colorspace(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_base_colorspace(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_device_gray(long jarg1, fz_context jarg1_);
  public final static native long fz_device_rgb(long jarg1, fz_context jarg1_);
  public final static native long fz_device_bgr(long jarg1, fz_context jarg1_);
  public final static native long fz_device_cmyk(long jarg1, fz_context jarg1_);
  public final static native long fz_device_lab(long jarg1, fz_context jarg1_);
  public final static native void fz_colorspace_name_colorant(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, int jarg3, byte[] jarg4);
  public final static native byte[] fz_colorspace_colorant(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, int jarg3);
  public final static native void fz_clamp_color(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, long jarg3, long jarg4);
  public final static native void fz_convert_color(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, long jarg3, long jarg4, fz_colorspace jarg4_, long jarg5, long jarg6, fz_colorspace jarg6_, long jarg7, fz_color_params jarg7_);
  public final static native void fz_default_colorspaces_refs_set(long jarg1, fz_default_colorspaces jarg1_, int jarg2);
  public final static native int fz_default_colorspaces_refs_get(long jarg1, fz_default_colorspaces jarg1_);
  public final static native void fz_default_colorspaces_gray_set(long jarg1, fz_default_colorspaces jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_default_colorspaces_gray_get(long jarg1, fz_default_colorspaces jarg1_);
  public final static native void fz_default_colorspaces_rgb_set(long jarg1, fz_default_colorspaces jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_default_colorspaces_rgb_get(long jarg1, fz_default_colorspaces jarg1_);
  public final static native void fz_default_colorspaces_cmyk_set(long jarg1, fz_default_colorspaces jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_default_colorspaces_cmyk_get(long jarg1, fz_default_colorspaces jarg1_);
  public final static native void fz_default_colorspaces_oi_set(long jarg1, fz_default_colorspaces jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_default_colorspaces_oi_get(long jarg1, fz_default_colorspaces jarg1_);
  public final static native long new_fz_default_colorspaces();
  public final static native void delete_fz_default_colorspaces(long jarg1);
  public final static native long fz_new_default_colorspaces(long jarg1, fz_context jarg1_);
  public final static native long fz_keep_default_colorspaces(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native void fz_drop_default_colorspaces(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native long fz_clone_default_colorspaces(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native long fz_default_gray(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native long fz_default_rgb(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native long fz_default_cmyk(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native long fz_default_output_intent(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_);
  public final static native void fz_set_default_gray(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_, long jarg3, fz_colorspace jarg3_);
  public final static native void fz_set_default_rgb(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_, long jarg3, fz_colorspace jarg3_);
  public final static native void fz_set_default_cmyk(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_, long jarg3, fz_colorspace jarg3_);
  public final static native void fz_set_default_output_intent(long jarg1, fz_context jarg1_, long jarg2, fz_default_colorspaces jarg2_, long jarg3, fz_colorspace jarg3_);
  public final static native void fz_colorspace_key_storable_set(long jarg1, fz_colorspace jarg1_, long jarg2);
  public final static native long fz_colorspace_key_storable_get(long jarg1, fz_colorspace jarg1_);
  public final static native void fz_colorspace_type_set(long jarg1, fz_colorspace jarg1_, int jarg2);
  public final static native int fz_colorspace_type_get(long jarg1, fz_colorspace jarg1_);
  public final static native void fz_colorspace_flags_set(long jarg1, fz_colorspace jarg1_, int jarg2);
  public final static native int fz_colorspace_flags_get(long jarg1, fz_colorspace jarg1_);
  public final static native void fz_colorspace_n_set(long jarg1, fz_colorspace jarg1_, int jarg2);
  public final static native int fz_colorspace_n_get(long jarg1, fz_colorspace jarg1_);
  public final static native void fz_colorspace_name_set(long jarg1, fz_colorspace jarg1_, byte[] jarg2);
  public final static native byte[] fz_colorspace_name_get(long jarg1, fz_colorspace jarg1_);
  public final static native long fz_colorspace_u_get(long jarg1, fz_colorspace jarg1_);
  public final static native long new_fz_colorspace();
  public final static native void delete_fz_colorspace(long jarg1);
  public final static native long fz_colorspace_u_indexed_get(long jarg1, fz_colorspace_u jarg1_);
  public final static native long fz_colorspace_u_separation_get(long jarg1, fz_colorspace_u jarg1_);
  public final static native long new_fz_colorspace_u();
  public final static native void delete_fz_colorspace_u(long jarg1);
  public final static native void fz_colorspace_u_separation_base_set(long jarg1, fz_colorspace_u_separation jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_colorspace_u_separation_base_get(long jarg1, fz_colorspace_u_separation jarg1_);
  public final static native void fz_colorspace_u_separation_eval_set(long jarg1, fz_colorspace_u_separation jarg1_, long jarg2);
  public final static native long fz_colorspace_u_separation_eval_get(long jarg1, fz_colorspace_u_separation jarg1_);
  public final static native void fz_colorspace_u_separation_drop_set(long jarg1, fz_colorspace_u_separation jarg1_, long jarg2);
  public final static native long fz_colorspace_u_separation_drop_get(long jarg1, fz_colorspace_u_separation jarg1_);
  public final static native void fz_colorspace_u_separation_tint_set(long jarg1, fz_colorspace_u_separation jarg1_, long jarg2);
  public final static native long fz_colorspace_u_separation_tint_get(long jarg1, fz_colorspace_u_separation jarg1_);
  public final static native void fz_colorspace_u_separation_colorant_set(long jarg1, fz_colorspace_u_separation jarg1_, long jarg2);
  public final static native long fz_colorspace_u_separation_colorant_get(long jarg1, fz_colorspace_u_separation jarg1_);
  public final static native long new_fz_colorspace_u_separation();
  public final static native void delete_fz_colorspace_u_separation(long jarg1);
  public final static native void fz_colorspace_u_indexed_base_set(long jarg1, fz_colorspace_u_indexed jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_colorspace_u_indexed_base_get(long jarg1, fz_colorspace_u_indexed jarg1_);
  public final static native void fz_colorspace_u_indexed_high_set(long jarg1, fz_colorspace_u_indexed jarg1_, int jarg2);
  public final static native int fz_colorspace_u_indexed_high_get(long jarg1, fz_colorspace_u_indexed jarg1_);
  public final static native void fz_colorspace_u_indexed_lookup_set(long jarg1, fz_colorspace_u_indexed jarg1_, byte[] jarg2);
  public final static native byte[] fz_colorspace_u_indexed_lookup_get(long jarg1, fz_colorspace_u_indexed jarg1_);
  public final static native long new_fz_colorspace_u_indexed();
  public final static native void delete_fz_colorspace_u_indexed(long jarg1);
  public final static native void fz_drop_colorspace_imp(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_pixmap_bbox(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_width(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_height(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_x(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_y(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_size(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native long fz_new_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, int jarg3, int jarg4, long jarg5, int jarg6);
  public final static native long fz_new_pixmap_with_bbox(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, long jarg3, fz_irect jarg3_, long jarg4, int jarg5);
  public final static native long fz_new_pixmap_with_data(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, int jarg3, int jarg4, long jarg5, int jarg6, int jarg7, byte[] jarg8);
  public final static native long fz_new_pixmap_with_bbox_and_data(long jarg1, fz_context jarg1_, long jarg2, fz_colorspace jarg2_, long jarg3, fz_irect jarg3_, long jarg4, int jarg5, byte[] jarg6);
  public final static native long fz_new_pixmap_from_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_irect jarg3_);
  public final static native long fz_clone_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native long fz_keep_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_drop_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native long fz_pixmap_colorspace(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_components(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_colorants(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_spots(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_alpha(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native byte[] fz_pixmap_samples(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native int fz_pixmap_stride(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_set_pixmap_resolution(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, int jarg3, int jarg4);
  public final static native void fz_clear_pixmap_with_value(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, int jarg3);
  public final static native void fz_fill_pixmap_with_color(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_colorspace jarg3_, long jarg4, long jarg5, fz_color_params jarg5_);
  public final static native void fz_clear_pixmap_rect_with_value(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, int jarg3, long jarg4, fz_irect jarg4_);
  public final static native void fz_clear_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_invert_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_invert_pixmap_alpha(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_invert_pixmap_luminance(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_tint_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, int jarg3, int jarg4);
  public final static native void fz_invert_pixmap_rect(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_irect jarg3_);
  public final static native void fz_invert_pixmap_raw(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_gamma_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, float jarg3);
  public final static native long fz_convert_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_colorspace jarg3_, long jarg4, fz_colorspace jarg4_, long jarg5, fz_default_colorspaces jarg5_, long jarg6, fz_color_params jarg6_, int jarg7);
  public final static native int fz_is_pixmap_monochrome(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native long fz_alpha_from_gray(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native void fz_decode_tile(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3);
  public final static native void fz_md5_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, short[] jarg3);
  public final static native long fz_unpack_stream(long jarg1, fz_context jarg1_, long jarg2, fz_stream jarg2_, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9);
  public final static native void fz_pixmap_storable_set(long jarg1, fz_pixmap jarg1_, long jarg2);
  public final static native long fz_pixmap_storable_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_x_set(long jarg1, fz_pixmap jarg1_, int jarg2);
  public final static native int fz_pixmap_x_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_y_set(long jarg1, fz_pixmap jarg1_, int jarg2);
  public final static native int fz_pixmap_y_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_w_set(long jarg1, fz_pixmap jarg1_, int jarg2);
  public final static native int fz_pixmap_w_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_h_set(long jarg1, fz_pixmap jarg1_, int jarg2);
  public final static native int fz_pixmap_h_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_n_set(long jarg1, fz_pixmap jarg1_, short jarg2);
  public final static native short fz_pixmap_n_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_s_set(long jarg1, fz_pixmap jarg1_, short jarg2);
  public final static native short fz_pixmap_s_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_alpha_set(long jarg1, fz_pixmap jarg1_, short jarg2);
  public final static native short fz_pixmap_alpha_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_flags_set(long jarg1, fz_pixmap jarg1_, short jarg2);
  public final static native short fz_pixmap_flags_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_stride_set(long jarg1, fz_pixmap jarg1_, long jarg2);
  public final static native long fz_pixmap_stride_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_seps_set(long jarg1, fz_pixmap jarg1_, long jarg2);
  public final static native long fz_pixmap_seps_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_xres_set(long jarg1, fz_pixmap jarg1_, int jarg2);
  public final static native int fz_pixmap_xres_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_yres_set(long jarg1, fz_pixmap jarg1_, int jarg2);
  public final static native int fz_pixmap_yres_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_colorspace_set(long jarg1, fz_pixmap jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_pixmap_colorspace_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_samples_set(long jarg1, fz_pixmap jarg1_, byte[] jarg2);
  public final static native byte[] fz_pixmap_samples_get(long jarg1, fz_pixmap jarg1_);
  public final static native void fz_pixmap_underlying_set(long jarg1, fz_pixmap jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native long fz_pixmap_underlying_get(long jarg1, fz_pixmap jarg1_);
  public final static native long new_fz_pixmap();
  public final static native void delete_fz_pixmap(long jarg1);
  public final static native int FZ_PIXMAP_FLAG_INTERPOLATE_get();
  public final static native int FZ_PIXMAP_FLAG_FREE_SAMPLES_get();
  public final static native long fz_warp_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_point jarg3_, int jarg4, int jarg5);
  public final static native long fz_autowarp_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_point jarg3_);
  public final static native int fz_detect_document(long jarg1, fz_context jarg1_, long jarg2, fz_point jarg2_, long jarg3, fz_pixmap jarg3_);
  public final static native long fz_clone_pixmap_area_with_different_seps(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_irect jarg3_, long jarg4, fz_colorspace jarg4_, long jarg5, long jarg6, fz_color_params jarg6_, long jarg7, fz_default_colorspaces jarg7_);
  public final static native long fz_new_pixmap_from_alpha_channel(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_);
  public final static native long fz_new_pixmap_from_color_and_mask(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_pixmap jarg3_);
  public final static native long fz_scale_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, float jarg3, float jarg4, float jarg5, float jarg6, long jarg7, fz_irect jarg7_);
  public final static native void fz_subsample_pixmap(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, int jarg3);
  public final static native void fz_copy_pixmap_rect(long jarg1, fz_context jarg1_, long jarg2, fz_pixmap jarg2_, long jarg3, fz_pixmap jarg3_, long jarg4, fz_irect jarg4_, long jarg5, fz_default_colorspaces jarg5_);
  public final static native int FZ_DEVFLAG_MASK_get();
  public final static native int FZ_DEVFLAG_COLOR_get();
  public final static native int FZ_DEVFLAG_UNCACHEABLE_get();
  public final static native int FZ_DEVFLAG_FILLCOLOR_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_STROKECOLOR_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_STARTCAP_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_DASHCAP_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_ENDCAP_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_LINEJOIN_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_MITERLIMIT_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_LINEWIDTH_UNDEFINED_get();
  public final static native int FZ_DEVFLAG_BBOX_DEFINED_get();
  public final static native int FZ_DEVFLAG_GRIDFIT_AS_TILED_get();
  public final static native int FZ_BLEND_NORMAL_get();
  public final static native int FZ_BLEND_MULTIPLY_get();
  public final static native int FZ_BLEND_SCREEN_get();
  public final static native int FZ_BLEND_OVERLAY_get();
  public final static native int FZ_BLEND_DARKEN_get();
  public final static native int FZ_BLEND_LIGHTEN_get();
  public final static native int FZ_BLEND_COLOR_DODGE_get();
  public final static native int FZ_BLEND_COLOR_BURN_get();
  public final static native int FZ_BLEND_HARD_LIGHT_get();
  public final static native int FZ_BLEND_SOFT_LIGHT_get();
  public final static native int FZ_BLEND_DIFFERENCE_get();
  public final static native int FZ_BLEND_EXCLUSION_get();
  public final static native int FZ_BLEND_HUE_get();
  public final static native int FZ_BLEND_SATURATION_get();
  public final static native int FZ_BLEND_COLOR_get();
  public final static native int FZ_BLEND_LUMINOSITY_get();
  public final static native int FZ_BLEND_MODEMASK_get();
  public final static native int FZ_BLEND_ISOLATED_get();
  public final static native int FZ_BLEND_KNOCKOUT_get();
  public final static native int fz_lookup_blendmode(byte[] jarg1);
  public final static native byte[] fz_blendmode_name(int jarg1);
  public final static native int FZ_FUNCTION_MAX_N_get();
  public final static native int FZ_FUNCTION_MAX_M_get();
  public final static native void fz_function_storable_set(long jarg1, fz_function jarg1_, long jarg2);
  public final static native long fz_function_storable_get(long jarg1, fz_function jarg1_);
  public final static native void fz_function_size_set(long jarg1, fz_function jarg1_, int jarg2);
  public final static native int fz_function_size_get(long jarg1, fz_function jarg1_);
  public final static native void fz_function_m_set(long jarg1, fz_function jarg1_, int jarg2);
  public final static native int fz_function_m_get(long jarg1, fz_function jarg1_);
  public final static native void fz_function_n_set(long jarg1, fz_function jarg1_, int jarg2);
  public final static native int fz_function_n_get(long jarg1, fz_function jarg1_);
  public final static native void fz_function_eval_set(long jarg1, fz_function jarg1_, long jarg2);
  public final static native long fz_function_eval_get(long jarg1, fz_function jarg1_);
  public final static native long new_fz_function();
  public final static native void delete_fz_function(long jarg1);
  public final static native long fz_new_function_of_size(long jarg1, fz_context jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, long jarg6, long jarg7);
  public final static native void fz_eval_function(long jarg1, fz_context jarg1_, long jarg2, fz_function jarg2_, long jarg3, int jarg4, long jarg5, int jarg6);
  public final static native long fz_keep_function(long jarg1, fz_context jarg1_, long jarg2, fz_function jarg2_);
  public final static native void fz_drop_function(long jarg1, fz_context jarg1_, long jarg2, fz_function jarg2_);
  public final static native int fz_function_size(long jarg1, fz_context jarg1_, long jarg2, fz_function jarg2_);
  public final static native void fz_device_container_stack_scissor_set(long jarg1, fz_device_container_stack jarg1_, long jarg2, fz_rect jarg2_);
  public final static native long fz_device_container_stack_scissor_get(long jarg1, fz_device_container_stack jarg1_);
  public final static native void fz_device_container_stack_type_set(long jarg1, fz_device_container_stack jarg1_, int jarg2);
  public final static native int fz_device_container_stack_type_get(long jarg1, fz_device_container_stack jarg1_);
  public final static native void fz_device_container_stack_user_set(long jarg1, fz_device_container_stack jarg1_, int jarg2);
  public final static native int fz_device_container_stack_user_get(long jarg1, fz_device_container_stack jarg1_);
  public final static native long new_fz_device_container_stack();
  public final static native void delete_fz_device_container_stack(long jarg1);
  public final static native int fz_device_container_stack_is_clip_get();
  public final static native int fz_device_container_stack_is_mask_get();
  public final static native int fz_device_container_stack_is_group_get();
  public final static native int fz_device_container_stack_is_tile_get();
  public final static native int FZ_STRUCTURE_INVALID_get();
  public final static native byte[] fz_structure_to_string(int jarg1);
  public final static native int fz_structure_from_string(byte[] jarg1);
  public final static native void fz_device_refs_set(long jarg1, fz_device jarg1_, int jarg2);
  public final static native int fz_device_refs_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_hints_set(long jarg1, fz_device jarg1_, int jarg2);
  public final static native int fz_device_hints_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_flags_set(long jarg1, fz_device jarg1_, int jarg2);
  public final static native int fz_device_flags_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_close_device_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_close_device_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_drop_device_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_drop_device_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_fill_path_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_fill_path_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_stroke_path_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_stroke_path_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_clip_path_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_clip_path_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_clip_stroke_path_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_clip_stroke_path_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_fill_text_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_fill_text_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_stroke_text_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_stroke_text_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_clip_text_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_clip_text_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_clip_stroke_text_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_clip_stroke_text_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_ignore_text_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_ignore_text_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_fill_shade_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_fill_shade_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_fill_image_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_fill_image_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_fill_image_mask_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_fill_image_mask_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_clip_image_mask_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_clip_image_mask_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_pop_clip_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_pop_clip_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_begin_mask_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_begin_mask_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_end_mask_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_end_mask_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_begin_group_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_begin_group_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_end_group_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_end_group_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_begin_tile_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_begin_tile_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_end_tile_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_end_tile_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_render_flags_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_render_flags_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_set_default_colorspaces_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_set_default_colorspaces_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_begin_layer_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_begin_layer_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_end_layer_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_end_layer_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_begin_structure_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_begin_structure_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_end_structure_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_end_structure_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_begin_metatext_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_begin_metatext_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_end_metatext_set(long jarg1, fz_device jarg1_, long jarg2);
  public final static native long fz_device_end_metatext_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_d1_rect_set(long jarg1, fz_device jarg1_, long jarg2, fz_rect jarg2_);
  public final static native long fz_device_d1_rect_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_container_len_set(long jarg1, fz_device jarg1_, int jarg2);
  public final static native int fz_device_container_len_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_container_cap_set(long jarg1, fz_device jarg1_, int jarg2);
  public final static native int fz_device_container_cap_get(long jarg1, fz_device jarg1_);
  public final static native void fz_device_container_set(long jarg1, fz_device jarg1_, long jarg2, fz_device_container_stack jarg2_);
  public final static native long fz_device_container_get(long jarg1, fz_device jarg1_);
  public final static native long new_fz_device();
  public final static native void delete_fz_device(long jarg1);
  public final static native void fz_fill_path(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, int jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_colorspace jarg6_, long jarg7, float jarg8, long jarg9, fz_color_params jarg9_);
  public final static native void fz_stroke_path(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_colorspace jarg6_, long jarg7, float jarg8, long jarg9, fz_color_params jarg9_);
  public final static native void fz_clip_path(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, int jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_rect jarg6_);
  public final static native void fz_clip_stroke_path(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_rect jarg6_);
  public final static native void fz_fill_text(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_, long jarg5, fz_colorspace jarg5_, long jarg6, float jarg7, long jarg8, fz_color_params jarg8_);
  public final static native void fz_stroke_text(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_colorspace jarg6_, long jarg7, float jarg8, long jarg9, fz_color_params jarg9_);
  public final static native void fz_clip_text(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_, long jarg5, fz_rect jarg5_);
  public final static native void fz_clip_stroke_text(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, long jarg5, fz_matrix jarg5_, long jarg6, fz_rect jarg6_);
  public final static native void fz_ignore_text(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_);
  public final static native void fz_pop_clip(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_fill_shade(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_, float jarg5, long jarg6, fz_color_params jarg6_);
  public final static native void fz_fill_image(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_, float jarg5, long jarg6, fz_color_params jarg6_);
  public final static native void fz_fill_image_mask(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_, long jarg5, fz_colorspace jarg5_, long jarg6, float jarg7, long jarg8, fz_color_params jarg8_);
  public final static native void fz_clip_image_mask(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, long jarg4, fz_matrix jarg4_, long jarg5, fz_rect jarg5_);
  public final static native void fz_begin_mask(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, fz_rect jarg3_, int jarg4, long jarg5, fz_colorspace jarg5_, long jarg6, long jarg7, fz_color_params jarg7_);
  public final static native void fz_end_mask(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_end_mask_tr(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, fz_function jarg3_);
  public final static native void fz_begin_group(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, fz_rect jarg3_, long jarg4, fz_colorspace jarg4_, int jarg5, int jarg6, int jarg7, float jarg8);
  public final static native void fz_end_group(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_begin_tile(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, fz_rect jarg3_, long jarg4, fz_rect jarg4_, float jarg5, float jarg6, long jarg7, fz_matrix jarg7_);
  public final static native int fz_begin_tile_id(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, fz_rect jarg3_, long jarg4, fz_rect jarg4_, float jarg5, float jarg6, long jarg7, fz_matrix jarg7_, int jarg8);
  public final static native void fz_end_tile(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_render_flags(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, int jarg3, int jarg4);
  public final static native void fz_set_default_colorspaces(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, long jarg3, fz_default_colorspaces jarg3_);
  public final static native void fz_begin_layer(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, byte[] jarg3);
  public final static native void fz_end_layer(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_begin_structure(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, int jarg3, byte[] jarg4, int jarg5);
  public final static native void fz_end_structure(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_begin_metatext(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, int jarg3, byte[] jarg4);
  public final static native void fz_end_metatext(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native long fz_new_device_of_size(long jarg1, fz_context jarg1_, int jarg2);
  public final static native void fz_close_device(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_drop_device(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native long fz_keep_device(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native void fz_enable_device_hints(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, int jarg3);
  public final static native void fz_disable_device_hints(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_, int jarg3);
  public final static native long fz_device_current_scissor(long jarg1, fz_context jarg1_, long jarg2, fz_device jarg2_);
  public final static native int FZ_DONT_INTERPOLATE_IMAGES_get();
  public final static native int FZ_NO_CACHE_get();
  public final static native int FZ_DONT_DECODE_IMAGES_get();
  public final static native void fz_cookie_abort_set(long jarg1, fz_cookie jarg1_, int jarg2);
  public final static native int fz_cookie_abort_get(long jarg1, fz_cookie jarg1_);
  public final static native void fz_cookie_progress_set(long jarg1, fz_cookie jarg1_, int jarg2);
  public final static native int fz_cookie_progress_get(long jarg1, fz_cookie jarg1_);
  public final static native void fz_cookie_progress_max_set(long jarg1, fz_cookie jarg1_, int jarg2);
  public final static native int fz_cookie_progress_max_get(long jarg1, fz_cookie jarg1_);
  public final static native void fz_cookie_errors_set(long jarg1, fz_cookie jarg1_, int jarg2);
  public final static native int fz_cookie_errors_get(long jarg1, fz_cookie jarg1_);
  public final static native void fz_cookie_incomplete_set(long jarg1, fz_cookie jarg1_, int jarg2);
  public final static native int fz_cookie_incomplete_get(long jarg1, fz_cookie jarg1_);
  public final static native long new_fz_cookie();
  public final static native void delete_fz_cookie(long jarg1);
  public final static native long fz_new_trace_device(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_new_xmltext_device(long jarg1, fz_context jarg1_, long jarg2);
  public final static native long fz_new_bbox_device(long jarg1, fz_context jarg1_, long jarg2, fz_rect jarg2_);
  public final static native long fz_new_test_device(long jarg1, fz_context jarg1_, long jarg2, float jarg3, int jarg4, long jarg5, fz_device jarg5_);
  public final static native int FZ_TEST_OPT_IMAGES_get();
  public final static native int FZ_TEST_OPT_SHADINGS_get();
  public final static native long fz_new_draw_device(long jarg1, fz_context jarg1_, long jarg2, fz_matrix jarg2_, long jarg3, fz_pixmap jarg3_);
  public final static native long fz_new_draw_device_with_bbox(long jarg1, fz_context jarg1_, long jarg2, fz_matrix jarg2_, long jarg3, fz_pixmap jarg3_, long jarg4, fz_irect jarg4_);
  public final static native long fz_new_draw_device_with_proof(long jarg1, fz_context jarg1_, long jarg2, fz_matrix jarg2_, long jarg3, fz_pixmap jarg3_, long jarg4, fz_colorspace jarg4_);
  public final static native long fz_new_draw_device_with_bbox_proof(long jarg1, fz_context jarg1_, long jarg2, fz_matrix jarg2_, long jarg3, fz_pixmap jarg3_, long jarg4, fz_irect jarg4_, long jarg5, fz_colorspace jarg5_);
  public final static native long fz_new_draw_device_type3(long jarg1, fz_context jarg1_, long jarg2, fz_matrix jarg2_, long jarg3, fz_pixmap jarg3_);
  public final static native void fz_draw_options_rotate_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_rotate_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_x_resolution_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_x_resolution_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_y_resolution_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_y_resolution_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_width_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_width_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_height_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_height_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_colorspace_set(long jarg1, fz_draw_options jarg1_, long jarg2, fz_colorspace jarg2_);
  public final static native long fz_draw_options_colorspace_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_alpha_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_alpha_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_graphics_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_graphics_get(long jarg1, fz_draw_options jarg1_);
  public final static native void fz_draw_options_text_set(long jarg1, fz_draw_options jarg1_, int jarg2);
  public final static native int fz_draw_options_text_get(long jarg1, fz_draw_options jarg1_);
  public final static native long new_fz_draw_options();
  public final static native void delete_fz_draw_options(long jarg1);
  public final static native void fz_draw_options_usage_set(byte[] jarg1);
  public final static native byte[] fz_draw_options_usage_get();
  public final static native long fz_parse_draw_options(long jarg1, fz_context jarg1_, long jarg2, fz_draw_options jarg2_, byte[] jarg3);
  public final static native long fz_new_draw_device_with_options(long jarg1, fz_context jarg1_, long jarg2, fz_draw_options jarg2_, long jarg3, fz_rect jarg3_, long jarg4);
}
