/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mobi.librera.mupdf;


public class fz_pixmap {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected fz_pixmap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(fz_pixmap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(fz_pixmap obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mupdfJNI.delete_fz_pixmap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setStorable(SWIGTYPE_p_fz_storable value) {
    mupdfJNI.fz_pixmap_storable_set(swigCPtr, this, SWIGTYPE_p_fz_storable.getCPtr(value));
  }

  public SWIGTYPE_p_fz_storable getStorable() {
    return new SWIGTYPE_p_fz_storable(mupdfJNI.fz_pixmap_storable_get(swigCPtr, this), true);
  }

  public void setX(int value) {
    mupdfJNI.fz_pixmap_x_set(swigCPtr, this, value);
  }

  public int getX() {
    return mupdfJNI.fz_pixmap_x_get(swigCPtr, this);
  }

  public void setY(int value) {
    mupdfJNI.fz_pixmap_y_set(swigCPtr, this, value);
  }

  public int getY() {
    return mupdfJNI.fz_pixmap_y_get(swigCPtr, this);
  }

  public void setW(int value) {
    mupdfJNI.fz_pixmap_w_set(swigCPtr, this, value);
  }

  public int getW() {
    return mupdfJNI.fz_pixmap_w_get(swigCPtr, this);
  }

  public void setH(int value) {
    mupdfJNI.fz_pixmap_h_set(swigCPtr, this, value);
  }

  public int getH() {
    return mupdfJNI.fz_pixmap_h_get(swigCPtr, this);
  }

  public void setN(short value) {
    mupdfJNI.fz_pixmap_n_set(swigCPtr, this, value);
  }

  public short getN() {
    return mupdfJNI.fz_pixmap_n_get(swigCPtr, this);
  }

  public void setS(short value) {
    mupdfJNI.fz_pixmap_s_set(swigCPtr, this, value);
  }

  public short getS() {
    return mupdfJNI.fz_pixmap_s_get(swigCPtr, this);
  }

  public void setAlpha(short value) {
    mupdfJNI.fz_pixmap_alpha_set(swigCPtr, this, value);
  }

  public short getAlpha() {
    return mupdfJNI.fz_pixmap_alpha_get(swigCPtr, this);
  }

  public void setFlags(short value) {
    mupdfJNI.fz_pixmap_flags_set(swigCPtr, this, value);
  }

  public short getFlags() {
    return mupdfJNI.fz_pixmap_flags_get(swigCPtr, this);
  }

  public void setStride(SWIGTYPE_p_ptrdiff_t value) {
    mupdfJNI.fz_pixmap_stride_set(swigCPtr, this, SWIGTYPE_p_ptrdiff_t.getCPtr(value));
  }

  public SWIGTYPE_p_ptrdiff_t getStride() {
    return new SWIGTYPE_p_ptrdiff_t(mupdfJNI.fz_pixmap_stride_get(swigCPtr, this), true);
  }

  public void setSeps(SWIGTYPE_p_fz_separations value) {
    mupdfJNI.fz_pixmap_seps_set(swigCPtr, this, SWIGTYPE_p_fz_separations.getCPtr(value));
  }

  public SWIGTYPE_p_fz_separations getSeps() {
    long cPtr = mupdfJNI.fz_pixmap_seps_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_separations(cPtr, false);
  }

  public void setXres(int value) {
    mupdfJNI.fz_pixmap_xres_set(swigCPtr, this, value);
  }

  public int getXres() {
    return mupdfJNI.fz_pixmap_xres_get(swigCPtr, this);
  }

  public void setYres(int value) {
    mupdfJNI.fz_pixmap_yres_set(swigCPtr, this, value);
  }

  public int getYres() {
    return mupdfJNI.fz_pixmap_yres_get(swigCPtr, this);
  }

  public void setColorspace(fz_colorspace value) {
    mupdfJNI.fz_pixmap_colorspace_set(swigCPtr, this, fz_colorspace.getCPtr(value), value);
  }

  public fz_colorspace getColorspace() {
    long cPtr = mupdfJNI.fz_pixmap_colorspace_get(swigCPtr, this);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public void setSamples(byte[] value) {
    mupdfJNI.fz_pixmap_samples_set(swigCPtr, this, value);
  }

//  public byte[] getSamples() {
//    long cPtr = mupdfJNI.fz_pixmap_samples_get(swigCPtr, this);
//    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
//  }

  public void setUnderlying(fz_pixmap value) {
    mupdfJNI.fz_pixmap_underlying_set(swigCPtr, this, fz_pixmap.getCPtr(value), value);
  }

  public fz_pixmap getUnderlying() {
    long cPtr = mupdfJNI.fz_pixmap_underlying_get(swigCPtr, this);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public fz_pixmap() {
    this(mupdfJNI.new_fz_pixmap(), true);
  }

}
