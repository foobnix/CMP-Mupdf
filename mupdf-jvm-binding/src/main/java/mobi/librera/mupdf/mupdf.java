/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mobi.librera.mupdf;


public class mupdf implements mupdfConstants {
  public static long fz_stat_ctime(byte[] path) {
    return mupdfJNI.fz_stat_ctime(path);
  }

  public static long fz_stat_mtime(byte[] path) {
    return mupdfJNI.fz_stat_mtime(path);
  }

  public static int fz_mkdir(byte[] path) {
    return mupdfJNI.fz_mkdir(path);
  }

  public static int fz_is_pow2(int a) {
    return mupdfJNI.fz_is_pow2(a);
  }

  public static void fz_vthrow(fz_context ctx, int errcode, byte[] arg2, SWIGTYPE_p_va_list ap) {
    mupdfJNI.fz_vthrow(fz_context.getCPtr(ctx), ctx, errcode, arg2, SWIGTYPE_p_va_list.getCPtr(ap));
  }

  public static void fz_throw(fz_context ctx, int errcode, byte[] arg2) {
    mupdfJNI.fz_throw(fz_context.getCPtr(ctx), ctx, errcode, arg2);
  }

  public static void fz_rethrow(fz_context ctx) {
    mupdfJNI.fz_rethrow(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_morph_error(fz_context ctx, int fromcode, int tocode) {
    mupdfJNI.fz_morph_error(fz_context.getCPtr(ctx), ctx, fromcode, tocode);
  }

  public static void fz_vwarn(fz_context ctx, byte[] fmt, SWIGTYPE_p_va_list ap) {
    mupdfJNI.fz_vwarn(fz_context.getCPtr(ctx), ctx, fmt, SWIGTYPE_p_va_list.getCPtr(ap));
  }

  public static void fz_warn(fz_context ctx, byte[] fmt) {
    mupdfJNI.fz_warn(fz_context.getCPtr(ctx), ctx, fmt);
  }

  public static byte[] fz_caught_message(fz_context ctx) {
    return mupdfJNI.fz_caught_message(fz_context.getCPtr(ctx), ctx);
  }

  public static int fz_caught(fz_context ctx) {
    return mupdfJNI.fz_caught(fz_context.getCPtr(ctx), ctx);
  }

  public static int fz_caught_errno(fz_context ctx) {
    return mupdfJNI.fz_caught_errno(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_rethrow_if(fz_context ctx, int errcode) {
    mupdfJNI.fz_rethrow_if(fz_context.getCPtr(ctx), ctx, errcode);
  }

  public static void fz_rethrow_unless(fz_context ctx, int errcode) {
    mupdfJNI.fz_rethrow_unless(fz_context.getCPtr(ctx), ctx, errcode);
  }

  public static void fz_log_error_printf(fz_context ctx, byte[] fmt) {
    mupdfJNI.fz_log_error_printf(fz_context.getCPtr(ctx), ctx, fmt);
  }

  public static void fz_vlog_error_printf(fz_context ctx, byte[] fmt, SWIGTYPE_p_va_list ap) {
    mupdfJNI.fz_vlog_error_printf(fz_context.getCPtr(ctx), ctx, fmt, SWIGTYPE_p_va_list.getCPtr(ap));
  }

  public static void fz_log_error(fz_context ctx, byte[] str) {
    mupdfJNI.fz_log_error(fz_context.getCPtr(ctx), ctx, str);
  }

  public static void fz_start_throw_on_repair(fz_context ctx) {
    mupdfJNI.fz_start_throw_on_repair(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_end_throw_on_repair(fz_context ctx) {
    mupdfJNI.fz_end_throw_on_repair(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_report_error(fz_context ctx) {
    mupdfJNI.fz_report_error(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_ignore_error(fz_context ctx) {
    mupdfJNI.fz_ignore_error(fz_context.getCPtr(ctx), ctx);
  }

  public static byte[] fz_convert_error(fz_context ctx, SWIGTYPE_p_int code) {
    return mupdfJNI.fz_convert_error(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_int.getCPtr(code));
  }

  public static void fz_flush_warnings(fz_context ctx) {
    mupdfJNI.fz_flush_warnings(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_assert_lock_held(fz_context ctx, int lock) {
    mupdfJNI.fz_assert_lock_held(fz_context.getCPtr(ctx), ctx, lock);
  }

  public static void fz_assert_lock_not_held(fz_context ctx, int lock) {
    mupdfJNI.fz_assert_lock_not_held(fz_context.getCPtr(ctx), ctx, lock);
  }

  public static void fz_lock_debug_lock(fz_context ctx, int lock) {
    mupdfJNI.fz_lock_debug_lock(fz_context.getCPtr(ctx), ctx, lock);
  }

  public static void fz_lock_debug_unlock(fz_context ctx, int lock) {
    mupdfJNI.fz_lock_debug_unlock(fz_context.getCPtr(ctx), ctx, lock);
  }

  public static fz_context fz_clone_context(fz_context ctx) {
    long cPtr = mupdfJNI.fz_clone_context(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_context(cPtr, false);
  }

  public static void fz_drop_context(fz_context ctx) {
    mupdfJNI.fz_drop_context(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_user_context(fz_context ctx, SWIGTYPE_p_void user) {
    mupdfJNI.fz_set_user_context(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(user));
  }

  public static SWIGTYPE_p_void fz_user_context(fz_context ctx) {
    long cPtr = mupdfJNI.fz_user_context(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void fz_default_error_callback(SWIGTYPE_p_void user, byte[] message) {
    mupdfJNI.fz_default_error_callback(SWIGTYPE_p_void.getCPtr(user), message);
  }

  public static void fz_default_warning_callback(SWIGTYPE_p_void user, byte[] message) {
    mupdfJNI.fz_default_warning_callback(SWIGTYPE_p_void.getCPtr(user), message);
  }

  public static void fz_set_error_callback(fz_context ctx, SWIGTYPE_p_f_p_void_p_q_const__char__void error_cb, SWIGTYPE_p_void user) {
    mupdfJNI.fz_set_error_callback(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_f_p_void_p_q_const__char__void.getCPtr(error_cb), SWIGTYPE_p_void.getCPtr(user));
  }

  public static SWIGTYPE_p_f_p_void_p_q_const__char__void fz_error_callback(fz_context ctx, SWIGTYPE_p_p_void user) {
    long cPtr = mupdfJNI.fz_error_callback(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_p_void.getCPtr(user));
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_void_p_q_const__char__void(cPtr, false);
  }

  public static void fz_set_warning_callback(fz_context ctx, SWIGTYPE_p_f_p_void_p_q_const__char__void warning_cb, SWIGTYPE_p_void user) {
    mupdfJNI.fz_set_warning_callback(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_f_p_void_p_q_const__char__void.getCPtr(warning_cb), SWIGTYPE_p_void.getCPtr(user));
  }

  public static SWIGTYPE_p_f_p_void_p_q_const__char__void fz_warning_callback(fz_context ctx, SWIGTYPE_p_p_void user) {
    long cPtr = mupdfJNI.fz_warning_callback(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_p_void.getCPtr(user));
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_void_p_q_const__char__void(cPtr, false);
  }

  public static void fz_tune_image_decode(fz_context ctx, SWIGTYPE_p_f_p_void_int_int_int_p_fz_irect__void image_decode, SWIGTYPE_p_void arg) {
    mupdfJNI.fz_tune_image_decode(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_f_p_void_int_int_int_p_fz_irect__void.getCPtr(image_decode), SWIGTYPE_p_void.getCPtr(arg));
  }

  public static void fz_tune_image_scale(fz_context ctx, SWIGTYPE_p_f_p_void_int_int_int_int__int image_scale, SWIGTYPE_p_void arg) {
    mupdfJNI.fz_tune_image_scale(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_f_p_void_int_int_int_int__int.getCPtr(image_scale), SWIGTYPE_p_void.getCPtr(arg));
  }

  public static int fz_aa_level(fz_context ctx) {
    return mupdfJNI.fz_aa_level(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_aa_level(fz_context ctx, int bits) {
    mupdfJNI.fz_set_aa_level(fz_context.getCPtr(ctx), ctx, bits);
  }

  public static int fz_text_aa_level(fz_context ctx) {
    return mupdfJNI.fz_text_aa_level(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_text_aa_level(fz_context ctx, int bits) {
    mupdfJNI.fz_set_text_aa_level(fz_context.getCPtr(ctx), ctx, bits);
  }

  public static int fz_graphics_aa_level(fz_context ctx) {
    return mupdfJNI.fz_graphics_aa_level(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_graphics_aa_level(fz_context ctx, int bits) {
    mupdfJNI.fz_set_graphics_aa_level(fz_context.getCPtr(ctx), ctx, bits);
  }

  public static float fz_graphics_min_line_width(fz_context ctx) {
    return mupdfJNI.fz_graphics_min_line_width(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_graphics_min_line_width(fz_context ctx, float min_line_width) {
    mupdfJNI.fz_set_graphics_min_line_width(fz_context.getCPtr(ctx), ctx, min_line_width);
  }

  public static byte[] fz_user_css(fz_context ctx) {
    return mupdfJNI.fz_user_css(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_user_css(fz_context ctx, byte[] text) {
    mupdfJNI.fz_set_user_css(fz_context.getCPtr(ctx), ctx, text);
  }

  public static void fz_load_user_css(fz_context ctx, byte[] filename) {
    mupdfJNI.fz_load_user_css(fz_context.getCPtr(ctx), ctx, filename);
  }

  public static int fz_use_document_css(fz_context ctx) {
    return mupdfJNI.fz_use_document_css(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_set_use_document_css(fz_context ctx, int use) {
    mupdfJNI.fz_set_use_document_css(fz_context.getCPtr(ctx), ctx, use);
  }

  public static void fz_enable_icc(fz_context ctx) {
    mupdfJNI.fz_enable_icc(fz_context.getCPtr(ctx), ctx);
  }

  public static void fz_disable_icc(fz_context ctx) {
    mupdfJNI.fz_disable_icc(fz_context.getCPtr(ctx), ctx);
  }

  public static SWIGTYPE_p_void fz_malloc(fz_context ctx, int size) {
    long cPtr = mupdfJNI.fz_malloc(fz_context.getCPtr(ctx), ctx, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_calloc(fz_context ctx, int count, int size) {
    long cPtr = mupdfJNI.fz_calloc(fz_context.getCPtr(ctx), ctx, count, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_realloc(fz_context ctx, SWIGTYPE_p_void p, int size) {
    long cPtr = mupdfJNI.fz_realloc(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void fz_free(fz_context ctx, SWIGTYPE_p_void p) {
    mupdfJNI.fz_free(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p));
  }

  public static SWIGTYPE_p_void fz_malloc_no_throw(fz_context ctx, int size) {
    long cPtr = mupdfJNI.fz_malloc_no_throw(fz_context.getCPtr(ctx), ctx, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_calloc_no_throw(fz_context ctx, int count, int size) {
    long cPtr = mupdfJNI.fz_calloc_no_throw(fz_context.getCPtr(ctx), ctx, count, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_realloc_no_throw(fz_context ctx, SWIGTYPE_p_void p, int size) {
    long cPtr = mupdfJNI.fz_realloc_no_throw(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_malloc_aligned(fz_context ctx, int size, int align) {
    long cPtr = mupdfJNI.fz_malloc_aligned(fz_context.getCPtr(ctx), ctx, size, align);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void fz_free_aligned(fz_context ctx, SWIGTYPE_p_void p) {
    mupdfJNI.fz_free_aligned(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p));
  }

  public static byte[] fz_strdup(fz_context ctx, byte[] s) {
    return mupdfJNI.fz_strdup(fz_context.getCPtr(ctx), ctx, s);
  }

  public static void fz_memrnd(fz_context ctx, byte[] block, int len) {
    mupdfJNI.fz_memrnd(fz_context.getCPtr(ctx), ctx, block, len);
  }

  public static fz_string fz_new_string(fz_context ctx, byte[] str) {
    long cPtr = mupdfJNI.fz_new_string(fz_context.getCPtr(ctx), ctx, str);
    return (cPtr == 0) ? null : new fz_string(cPtr, false);
  }

  public static fz_string fz_keep_string(fz_context ctx, fz_string str) {
    long cPtr = mupdfJNI.fz_keep_string(fz_context.getCPtr(ctx), ctx, fz_string.getCPtr(str), str);
    return (cPtr == 0) ? null : new fz_string(cPtr, false);
  }

  public static void fz_drop_string(fz_context ctx, fz_string str) {
    mupdfJNI.fz_drop_string(fz_context.getCPtr(ctx), ctx, fz_string.getCPtr(str), str);
  }

  public static void fz_var_imp(SWIGTYPE_p_void arg0) {
    mupdfJNI.fz_var_imp(SWIGTYPE_p_void.getCPtr(arg0));
  }

  public static SWIGTYPE_p_jmp_buf fz_push_try(fz_context ctx) {
    long cPtr = mupdfJNI.fz_push_try(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new SWIGTYPE_p_jmp_buf(cPtr, false);
  }

  public static int fz_do_try(fz_context ctx) {
    return mupdfJNI.fz_do_try(fz_context.getCPtr(ctx), ctx);
  }

  public static int fz_do_always(fz_context ctx) {
    return mupdfJNI.fz_do_always(fz_context.getCPtr(ctx), ctx);
  }

  public static int fz_do_catch(fz_context ctx) {
    return mupdfJNI.fz_do_catch(fz_context.getCPtr(ctx), ctx);
  }

  public static fz_context fz_new_context_imp(fz_alloc_context alloc, fz_locks_context locks, int max_store, byte[] version) {
    long cPtr = mupdfJNI.fz_new_context_imp(fz_alloc_context.getCPtr(alloc), alloc, fz_locks_context.getCPtr(locks), locks, max_store, version);
    return (cPtr == 0) ? null : new fz_context(cPtr, false);
  }

  public static void fz_lock(fz_context ctx, int lock) {
    mupdfJNI.fz_lock(fz_context.getCPtr(ctx), ctx, lock);
  }

  public static void fz_unlock(fz_context ctx, int lock) {
    mupdfJNI.fz_unlock(fz_context.getCPtr(ctx), ctx, lock);
  }

  public static SWIGTYPE_p_void fz_keep_imp(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_int refs) {
    long cPtr = mupdfJNI.fz_keep_imp(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_int.getCPtr(refs));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_keep_imp_locked(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_int refs) {
    long cPtr = mupdfJNI.fz_keep_imp_locked(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_int.getCPtr(refs));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_keep_imp8_locked(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_signed_char refs) {
    long cPtr = mupdfJNI.fz_keep_imp8_locked(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_signed_char.getCPtr(refs));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_keep_imp8(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_signed_char refs) {
    long cPtr = mupdfJNI.fz_keep_imp8(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_signed_char.getCPtr(refs));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void fz_keep_imp16(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_short refs) {
    long cPtr = mupdfJNI.fz_keep_imp16(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_short.getCPtr(refs));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static int fz_drop_imp(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_int refs) {
    return mupdfJNI.fz_drop_imp(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_int.getCPtr(refs));
  }

  public static int fz_drop_imp8(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_signed_char refs) {
    return mupdfJNI.fz_drop_imp8(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_signed_char.getCPtr(refs));
  }

  public static int fz_drop_imp16(fz_context ctx, SWIGTYPE_p_void p, SWIGTYPE_p_short refs) {
    return mupdfJNI.fz_drop_imp16(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(p), SWIGTYPE_p_short.getCPtr(refs));
  }

  public static int fz_file_exists(fz_context ctx, byte[] path) {
    return mupdfJNI.fz_file_exists(fz_context.getCPtr(ctx), ctx, path);
  }

  public static fz_stream fz_open_file(fz_context ctx, byte[] filename) {
    long cPtr = mupdfJNI.fz_open_file(fz_context.getCPtr(ctx), ctx, filename);
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_stream fz_open_file_autodelete(fz_context ctx, byte[] filename) {
    long cPtr = mupdfJNI.fz_open_file_autodelete(fz_context.getCPtr(ctx), ctx, filename);
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_stream fz_try_open_file(fz_context ctx, byte[] name) {
    long cPtr = mupdfJNI.fz_try_open_file(fz_context.getCPtr(ctx), ctx, name);
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static byte[] fz_stream_filename(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_stream_filename(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static fz_stream fz_open_memory(fz_context ctx, byte[] data, int len) {
    long cPtr = mupdfJNI.fz_open_memory(fz_context.getCPtr(ctx), ctx, data, len);
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_stream fz_open_buffer(fz_context ctx, SWIGTYPE_p_fz_buffer buf) {
    long cPtr = mupdfJNI.fz_open_buffer(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_buffer.getCPtr(buf));
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_stream fz_open_leecher(fz_context ctx, fz_stream chain, SWIGTYPE_p_fz_buffer buf) {
    long cPtr = mupdfJNI.fz_open_leecher(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(chain), chain, SWIGTYPE_p_fz_buffer.getCPtr(buf));
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_stream fz_keep_stream(fz_context ctx, fz_stream stm) {
    long cPtr = mupdfJNI.fz_keep_stream(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static void fz_drop_stream(fz_context ctx, fz_stream stm) {
    mupdfJNI.fz_drop_stream(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static long fz_tell(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_tell(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static void fz_seek(fz_context ctx, fz_stream stm, long offset, int whence) {
    mupdfJNI.fz_seek(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, offset, whence);
  }

  public static int fz_read(fz_context ctx, fz_stream stm, byte[] data, int len) {
    return mupdfJNI.fz_read(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, data, len);
  }

  public static int fz_skip(fz_context ctx, fz_stream stm, int len) {
    return mupdfJNI.fz_skip(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, len);
  }

  public static SWIGTYPE_p_fz_buffer fz_read_all(fz_context ctx, fz_stream stm, int initial) {
    long cPtr = mupdfJNI.fz_read_all(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, initial);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_read_file(fz_context ctx, byte[] filename) {
    long cPtr = mupdfJNI.fz_read_file(fz_context.getCPtr(ctx), ctx, filename);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_try_read_file(fz_context ctx, byte[] filename) {
    long cPtr = mupdfJNI.fz_try_read_file(fz_context.getCPtr(ctx), ctx, filename);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static int fz_read_uint16(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint16(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint24(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint24(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint32(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint32(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint64(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint64(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint16_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint16_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint24_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint24_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint32_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint32_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_uint64_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_uint64_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static short fz_read_int16(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_int16(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_int32(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_int32(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static long fz_read_int64(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_int64(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static short fz_read_int16_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_int16_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_int32_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_int32_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static long fz_read_int64_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_int64_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static float fz_read_float_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_float_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static float fz_read_float(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_float(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static void fz_read_string(fz_context ctx, fz_stream stm, byte[] buffer, int len) {
    mupdfJNI.fz_read_string(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, buffer, len);
  }

  public static int fz_read_rune(fz_context ctx, fz_stream in) {
    return mupdfJNI.fz_read_rune(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(in), in);
  }

  public static int fz_read_utf16_le(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_utf16_le(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_read_utf16_be(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_utf16_be(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static fz_stream fz_new_stream(fz_context ctx, SWIGTYPE_p_void state, SWIGTYPE_p_f_p_struct_fz_context_p_struct_fz_stream_size_t__int next, SWIGTYPE_p_f_p_struct_fz_context_p_void__void drop) {
    long cPtr = mupdfJNI.fz_new_stream(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_void.getCPtr(state), SWIGTYPE_p_f_p_struct_fz_context_p_struct_fz_stream_size_t__int.getCPtr(next), SWIGTYPE_p_f_p_struct_fz_context_p_void__void.getCPtr(drop));
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_read_best(fz_context ctx, fz_stream stm, int initial, SWIGTYPE_p_int truncated, int worst_case) {
    long cPtr = mupdfJNI.fz_read_best(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, initial, SWIGTYPE_p_int.getCPtr(truncated), worst_case);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static byte[] fz_read_line(fz_context ctx, fz_stream stm, byte[] buf, int max) {
    return mupdfJNI.fz_read_line(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, buf, max);
  }

  public static int fz_skip_string(fz_context ctx, fz_stream stm, byte[] str) {
    return mupdfJNI.fz_skip_string(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, str);
  }

  public static void fz_skip_space(fz_context ctx, fz_stream stm) {
    mupdfJNI.fz_skip_space(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_available(fz_context ctx, fz_stream stm, int max) {
    return mupdfJNI.fz_available(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, max);
  }

  public static int fz_read_byte(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_read_byte(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_peek_byte(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_peek_byte(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static void fz_unread_byte(fz_context ctx, fz_stream stm) {
    mupdfJNI.fz_unread_byte(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_is_eof(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_is_eof(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static long fz_read_bits(fz_context ctx, fz_stream stm, int n) {
    return mupdfJNI.fz_read_bits(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, n);
  }

  public static long fz_read_rbits(fz_context ctx, fz_stream stm, int n) {
    return mupdfJNI.fz_read_rbits(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm, n);
  }

  public static void fz_sync_bits(fz_context ctx, fz_stream stm) {
    mupdfJNI.fz_sync_bits(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static int fz_is_eof_bits(fz_context ctx, fz_stream stm) {
    return mupdfJNI.fz_is_eof_bits(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stm), stm);
  }

  public static fz_stream fz_open_file_ptr_no_close(fz_context ctx, SWIGTYPE_p_FILE file) {
    long cPtr = mupdfJNI.fz_open_file_ptr_no_close(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_FILE.getCPtr(file));
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_box_type fz_box_type_from_string(byte[] name) {
    return fz_box_type.swigToEnum(mupdfJNI.fz_box_type_from_string(name));
  }

  public static byte[] fz_string_from_box_type(fz_box_type box) {
    return mupdfJNI.fz_string_from_box_type(box.swigValue());
  }

  public static SWIGTYPE_p_fz_location fz_make_location(int chapter, int page) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_make_location(chapter, page), true);
  }

  public static void fz_register_document_handler(fz_context ctx, fz_document_handler handler) {
    mupdfJNI.fz_register_document_handler(fz_context.getCPtr(ctx), ctx, fz_document_handler.getCPtr(handler), handler);
  }

  public static void fz_register_document_handlers(fz_context ctx) {
    mupdfJNI.fz_register_document_handlers(fz_context.getCPtr(ctx), ctx);
  }

  public static fz_document_handler fz_recognize_document(fz_context ctx, byte[] magic) {
    long cPtr = mupdfJNI.fz_recognize_document(fz_context.getCPtr(ctx), ctx, magic);
    return (cPtr == 0) ? null : new fz_document_handler(cPtr, false);
  }

  public static fz_document_handler fz_recognize_document_content(fz_context ctx, byte[] filename) {
    long cPtr = mupdfJNI.fz_recognize_document_content(fz_context.getCPtr(ctx), ctx, filename);
    return (cPtr == 0) ? null : new fz_document_handler(cPtr, false);
  }

  public static fz_document_handler fz_recognize_document_stream_content(fz_context ctx, fz_stream stream, byte[] magic) {
    long cPtr = mupdfJNI.fz_recognize_document_stream_content(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stream), stream, magic);
    return (cPtr == 0) ? null : new fz_document_handler(cPtr, false);
  }

  public static fz_document_handler fz_recognize_document_stream_and_dir_content(fz_context ctx, fz_stream stream, SWIGTYPE_p_fz_archive dir, byte[] magic) {
    long cPtr = mupdfJNI.fz_recognize_document_stream_and_dir_content(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(stream), stream, SWIGTYPE_p_fz_archive.getCPtr(dir), magic);
    return (cPtr == 0) ? null : new fz_document_handler(cPtr, false);
  }

  public static fz_document fz_open_document(fz_context ctx, byte[] filename) {
    long cPtr = mupdfJNI.fz_open_document(fz_context.getCPtr(ctx), ctx, filename);
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static fz_document fz_open_accelerated_document(fz_context ctx, byte[] filename, byte[] accel) {
    long cPtr = mupdfJNI.fz_open_accelerated_document(fz_context.getCPtr(ctx), ctx, filename, accel);
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static fz_document fz_open_document_with_stream(fz_context ctx, byte[] magic, fz_stream stream) {
    long cPtr = mupdfJNI.fz_open_document_with_stream(fz_context.getCPtr(ctx), ctx, magic, fz_stream.getCPtr(stream), stream);
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static fz_document fz_open_document_with_stream_and_dir(fz_context ctx, byte[] magic, fz_stream stream, SWIGTYPE_p_fz_archive dir) {
    long cPtr = mupdfJNI.fz_open_document_with_stream_and_dir(fz_context.getCPtr(ctx), ctx, magic, fz_stream.getCPtr(stream), stream, SWIGTYPE_p_fz_archive.getCPtr(dir));
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static fz_document fz_open_document_with_buffer(fz_context ctx, byte[] magic, SWIGTYPE_p_fz_buffer buffer) {
    long cPtr = mupdfJNI.fz_open_document_with_buffer(fz_context.getCPtr(ctx), ctx, magic, SWIGTYPE_p_fz_buffer.getCPtr(buffer));
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static fz_document fz_open_accelerated_document_with_stream(fz_context ctx, byte[] magic, fz_stream stream, fz_stream accel) {
    long cPtr = mupdfJNI.fz_open_accelerated_document_with_stream(fz_context.getCPtr(ctx), ctx, magic, fz_stream.getCPtr(stream), stream, fz_stream.getCPtr(accel), accel);
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static fz_document fz_open_accelerated_document_with_stream_and_dir(fz_context ctx, byte[] magic, fz_stream stream, fz_stream accel, SWIGTYPE_p_fz_archive dir) {
    long cPtr = mupdfJNI.fz_open_accelerated_document_with_stream_and_dir(fz_context.getCPtr(ctx), ctx, magic, fz_stream.getCPtr(stream), stream, fz_stream.getCPtr(accel), accel, SWIGTYPE_p_fz_archive.getCPtr(dir));
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static int fz_document_supports_accelerator(fz_context ctx, fz_document doc) {
    return mupdfJNI.fz_document_supports_accelerator(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
  }

  public static void fz_save_accelerator(fz_context ctx, fz_document doc, byte[] accel) {
    mupdfJNI.fz_save_accelerator(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, accel);
  }

  public static void fz_output_accelerator(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_output accel) {
    mupdfJNI.fz_output_accelerator(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_output.getCPtr(accel));
  }

  public static SWIGTYPE_p_void fz_new_document_of_size(fz_context ctx, int size) {
    long cPtr = mupdfJNI.fz_new_document_of_size(fz_context.getCPtr(ctx), ctx, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static fz_document fz_keep_document(fz_context ctx, fz_document doc) {
    long cPtr = mupdfJNI.fz_keep_document(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static void fz_drop_document(fz_context ctx, fz_document doc) {
    mupdfJNI.fz_drop_document(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
  }

  public static int fz_needs_password(fz_context ctx, fz_document doc) {
    return mupdfJNI.fz_needs_password(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
  }

  public static int fz_authenticate_password(fz_context ctx, fz_document doc, byte[] password) {
    return mupdfJNI.fz_authenticate_password(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, password);
  }

  public static SWIGTYPE_p_fz_outline fz_load_outline(fz_context ctx, fz_document doc) {
    long cPtr = mupdfJNI.fz_load_outline(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_outline(cPtr, false);
  }

  public static SWIGTYPE_p_fz_outline_iterator fz_new_outline_iterator(fz_context ctx, fz_document doc) {
    long cPtr = mupdfJNI.fz_new_outline_iterator(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_outline_iterator(cPtr, false);
  }

  public static int fz_is_document_reflowable(fz_context ctx, fz_document doc) {
    return mupdfJNI.fz_is_document_reflowable(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
  }

  public static void fz_layout_document(fz_context ctx, fz_document doc, float w, float h, float em) {
    mupdfJNI.fz_layout_document(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, w, h, em);
  }

  public static int fz_make_bookmark(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_location loc) {
    return mupdfJNI.fz_make_bookmark(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_location.getCPtr(loc));
  }

  public static SWIGTYPE_p_fz_location fz_lookup_bookmark(fz_context ctx, fz_document doc, int mark) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_lookup_bookmark(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, mark), true);
  }

  public static int fz_count_pages(fz_context ctx, fz_document doc) {
    return mupdfJNI.fz_count_pages(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
  }

  public static SWIGTYPE_p_fz_link_dest fz_resolve_link_dest(fz_context ctx, fz_document doc, byte[] uri) {
    return new SWIGTYPE_p_fz_link_dest(mupdfJNI.fz_resolve_link_dest(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, uri), true);
  }

  public static byte[] fz_format_link_uri(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_link_dest dest) {
    return mupdfJNI.fz_format_link_uri(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_link_dest.getCPtr(dest));
  }

  public static SWIGTYPE_p_fz_location fz_resolve_link(fz_context ctx, fz_document doc, byte[] uri, SWIGTYPE_p_float xp, SWIGTYPE_p_float yp) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_resolve_link(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, uri, SWIGTYPE_p_float.getCPtr(xp), SWIGTYPE_p_float.getCPtr(yp)), true);
  }

  public static void fz_run_document_structure(fz_context ctx, fz_document doc, fz_device dev, fz_cookie cookie) {
    mupdfJNI.fz_run_document_structure(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, fz_device.getCPtr(dev), dev, fz_cookie.getCPtr(cookie), cookie);
  }

  public static SWIGTYPE_p_fz_location fz_last_page(fz_context ctx, fz_document doc) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_last_page(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc), true);
  }

  public static SWIGTYPE_p_fz_location fz_next_page(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_location loc) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_next_page(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_location.getCPtr(loc)), true);
  }

  public static SWIGTYPE_p_fz_location fz_previous_page(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_location loc) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_previous_page(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_location.getCPtr(loc)), true);
  }

  public static SWIGTYPE_p_fz_location fz_clamp_location(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_location loc) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_clamp_location(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_location.getCPtr(loc)), true);
  }

  public static SWIGTYPE_p_fz_location fz_location_from_page_number(fz_context ctx, fz_document doc, int number) {
    return new SWIGTYPE_p_fz_location(mupdfJNI.fz_location_from_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number), true);
  }

  public static int fz_page_number_from_location(fz_context ctx, fz_document doc, SWIGTYPE_p_fz_location loc) {
    return mupdfJNI.fz_page_number_from_location(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_fz_location.getCPtr(loc));
  }

  public static fz_page fz_load_page(fz_context ctx, fz_document doc, int number) {
    long cPtr = mupdfJNI.fz_load_page(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number);
    return (cPtr == 0) ? null : new fz_page(cPtr, false);
  }

  public static int fz_count_chapters(fz_context ctx, fz_document doc) {
    return mupdfJNI.fz_count_chapters(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
  }

  public static int fz_count_chapter_pages(fz_context ctx, fz_document doc, int chapter) {
    return mupdfJNI.fz_count_chapter_pages(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, chapter);
  }

  public static fz_page fz_load_chapter_page(fz_context ctx, fz_document doc, int chapter, int page) {
    long cPtr = mupdfJNI.fz_load_chapter_page(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, chapter, page);
    return (cPtr == 0) ? null : new fz_page(cPtr, false);
  }

  public static SWIGTYPE_p_fz_link fz_load_links(fz_context ctx, fz_page page) {
    long cPtr = mupdfJNI.fz_load_links(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_link(cPtr, false);
  }

  public static fz_page fz_new_page_of_size(fz_context ctx, int size, fz_document doc) {
    long cPtr = mupdfJNI.fz_new_page_of_size(fz_context.getCPtr(ctx), ctx, size, fz_document.getCPtr(doc), doc);
    return (cPtr == 0) ? null : new fz_page(cPtr, false);
  }

  public static fz_rect fz_bound_page(fz_context ctx, fz_page page) {
    return new fz_rect(mupdfJNI.fz_bound_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page), true);
  }

  public static fz_rect fz_bound_page_box(fz_context ctx, fz_page page, fz_box_type box) {
    return new fz_rect(mupdfJNI.fz_bound_page_box(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, box.swigValue()), true);
  }

  public static void fz_run_page(fz_context ctx, fz_page page, fz_device dev, fz_matrix transform, fz_cookie cookie) {
    mupdfJNI.fz_run_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_device.getCPtr(dev), dev, fz_matrix.getCPtr(transform), transform, fz_cookie.getCPtr(cookie), cookie);
  }

  public static void fz_run_page_contents(fz_context ctx, fz_page page, fz_device dev, fz_matrix transform, fz_cookie cookie) {
    mupdfJNI.fz_run_page_contents(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_device.getCPtr(dev), dev, fz_matrix.getCPtr(transform), transform, fz_cookie.getCPtr(cookie), cookie);
  }

  public static void fz_run_page_annots(fz_context ctx, fz_page page, fz_device dev, fz_matrix transform, fz_cookie cookie) {
    mupdfJNI.fz_run_page_annots(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_device.getCPtr(dev), dev, fz_matrix.getCPtr(transform), transform, fz_cookie.getCPtr(cookie), cookie);
  }

  public static void fz_run_page_widgets(fz_context ctx, fz_page page, fz_device dev, fz_matrix transform, fz_cookie cookie) {
    mupdfJNI.fz_run_page_widgets(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_device.getCPtr(dev), dev, fz_matrix.getCPtr(transform), transform, fz_cookie.getCPtr(cookie), cookie);
  }

  public static fz_page fz_keep_page(fz_context ctx, fz_page page) {
    long cPtr = mupdfJNI.fz_keep_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
    return (cPtr == 0) ? null : new fz_page(cPtr, false);
  }

  public static void fz_drop_page(fz_context ctx, fz_page page) {
    mupdfJNI.fz_drop_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
  }

  public static SWIGTYPE_p_fz_transition fz_page_presentation(fz_context ctx, fz_page page, SWIGTYPE_p_fz_transition transition, SWIGTYPE_p_float duration) {
    long cPtr = mupdfJNI.fz_page_presentation(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, SWIGTYPE_p_fz_transition.getCPtr(transition), SWIGTYPE_p_float.getCPtr(duration));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_transition(cPtr, false);
  }

  public static byte[] fz_page_label(fz_context ctx, fz_page page, byte[] buf, int size) {
    return mupdfJNI.fz_page_label(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, buf, size);
  }

  public static int fz_has_permission(fz_context ctx, fz_document doc, fz_permission p) {
    return mupdfJNI.fz_has_permission(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, p.swigValue());
  }

  public static int fz_lookup_metadata(fz_context ctx, fz_document doc, byte[] key, byte[] buf, int size) {
    return mupdfJNI.fz_lookup_metadata(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, key, buf, size);
  }

  public static void fz_set_metadata(fz_context ctx, fz_document doc, byte[] key, byte[] value) {
    mupdfJNI.fz_set_metadata(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, key, value);
  }

  public static fz_colorspace fz_document_output_intent(fz_context ctx, fz_document doc) {
    long cPtr = mupdfJNI.fz_document_output_intent(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static SWIGTYPE_p_fz_separations fz_page_separations(fz_context ctx, fz_page page) {
    long cPtr = mupdfJNI.fz_page_separations(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_separations(cPtr, false);
  }

  public static int fz_page_uses_overprint(fz_context ctx, fz_page page) {
    return mupdfJNI.fz_page_uses_overprint(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
  }

  public static SWIGTYPE_p_fz_link fz_create_link(fz_context ctx, fz_page page, fz_rect bbox, byte[] uri) {
    long cPtr = mupdfJNI.fz_create_link(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_rect.getCPtr(bbox), bbox, uri);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_link(cPtr, false);
  }

  public static void fz_delete_link(fz_context ctx, fz_page page, SWIGTYPE_p_fz_link link) {
    mupdfJNI.fz_delete_link(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, SWIGTYPE_p_fz_link.getCPtr(link));
  }

  public static SWIGTYPE_p_void fz_process_opened_pages(fz_context ctx, fz_document doc, SWIGTYPE_p_f_p_struct_fz_context_p_struct_fz_page_p_void__p_void process_openend_page, SWIGTYPE_p_void state) {
    long cPtr = mupdfJNI.fz_process_opened_pages(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, SWIGTYPE_p_f_p_struct_fz_context_p_struct_fz_page_p_void__p_void.getCPtr(process_openend_page), SWIGTYPE_p_void.getCPtr(state));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_fz_display_list fz_new_display_list_from_page(fz_context ctx, fz_page page) {
    long cPtr = mupdfJNI.fz_new_display_list_from_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_display_list(cPtr, false);
  }

  public static SWIGTYPE_p_fz_display_list fz_new_display_list_from_page_number(fz_context ctx, fz_document doc, int number) {
    long cPtr = mupdfJNI.fz_new_display_list_from_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_display_list(cPtr, false);
  }

  public static SWIGTYPE_p_fz_display_list fz_new_display_list_from_page_contents(fz_context ctx, fz_page page) {
    long cPtr = mupdfJNI.fz_new_display_list_from_page_contents(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_display_list(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_display_list(fz_context ctx, SWIGTYPE_p_fz_display_list list, fz_matrix ctm, fz_colorspace cs, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_display_list(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_page(fz_context ctx, fz_page page, fz_matrix ctm, fz_colorspace cs, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_page_number(fz_context ctx, fz_document doc, int number, fz_matrix ctm, fz_colorspace cs, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_page_contents(fz_context ctx, fz_page page, fz_matrix ctm, fz_colorspace cs, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_page_contents(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_display_list_with_separations(fz_context ctx, SWIGTYPE_p_fz_display_list list, fz_matrix ctm, fz_colorspace cs, SWIGTYPE_p_fz_separations seps, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_display_list_with_separations(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_page_with_separations(fz_context ctx, fz_page page, fz_matrix ctm, fz_colorspace cs, SWIGTYPE_p_fz_separations seps, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_page_with_separations(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_page_number_with_separations(fz_context ctx, fz_document doc, int number, fz_matrix ctm, fz_colorspace cs, SWIGTYPE_p_fz_separations seps, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_page_number_with_separations(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_page_contents_with_separations(fz_context ctx, fz_page page, fz_matrix ctm, fz_colorspace cs, SWIGTYPE_p_fz_separations seps, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_page_contents_with_separations(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(cs), cs, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_fill_pixmap_from_display_list(fz_context ctx, SWIGTYPE_p_fz_display_list list, fz_matrix ctm, fz_pixmap pix) {
    long cPtr = mupdfJNI.fz_fill_pixmap_from_display_list(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), fz_matrix.getCPtr(ctm), ctm, fz_pixmap.getCPtr(pix), pix);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static SWIGTYPE_p_fz_stext_page fz_new_stext_page_from_page(fz_context ctx, fz_page page, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_stext_page_from_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_stext_page(cPtr, false);
  }

  public static SWIGTYPE_p_fz_stext_page fz_new_stext_page_from_page_number(fz_context ctx, fz_document doc, int number, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_stext_page_from_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number, SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_stext_page(cPtr, false);
  }

  public static SWIGTYPE_p_fz_stext_page fz_new_stext_page_from_chapter_page_number(fz_context ctx, fz_document doc, int chapter, int number, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_stext_page_from_chapter_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, chapter, number, SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_stext_page(cPtr, false);
  }

  public static SWIGTYPE_p_fz_stext_page fz_new_stext_page_from_display_list(fz_context ctx, SWIGTYPE_p_fz_display_list list, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_stext_page_from_display_list(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_stext_page(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_new_buffer_from_stext_page(fz_context ctx, SWIGTYPE_p_fz_stext_page text) {
    long cPtr = mupdfJNI.fz_new_buffer_from_stext_page(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_stext_page.getCPtr(text));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_new_buffer_from_page(fz_context ctx, fz_page page, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_buffer_from_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_new_buffer_from_page_number(fz_context ctx, fz_document doc, int number, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_buffer_from_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number, SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_new_buffer_from_display_list(fz_context ctx, SWIGTYPE_p_fz_display_list list, SWIGTYPE_p_fz_stext_options options) {
    long cPtr = mupdfJNI.fz_new_buffer_from_display_list(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), SWIGTYPE_p_fz_stext_options.getCPtr(options));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static int fz_search_page(fz_context ctx, fz_page page, byte[] needle, SWIGTYPE_p_int hit_mark, fz_quad hit_bbox, int hit_max) {
    return mupdfJNI.fz_search_page(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, needle, SWIGTYPE_p_int.getCPtr(hit_mark), fz_quad.getCPtr(hit_bbox), hit_bbox, hit_max);
  }

  public static int fz_search_page_number(fz_context ctx, fz_document doc, int number, byte[] needle, SWIGTYPE_p_int hit_mark, fz_quad hit_bbox, int hit_max) {
    return mupdfJNI.fz_search_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number, needle, SWIGTYPE_p_int.getCPtr(hit_mark), fz_quad.getCPtr(hit_bbox), hit_bbox, hit_max);
  }

  public static int fz_search_chapter_page_number(fz_context ctx, fz_document doc, int chapter, int page, byte[] needle, SWIGTYPE_p_int hit_mark, fz_quad hit_bbox, int hit_max) {
    return mupdfJNI.fz_search_chapter_page_number(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, chapter, page, needle, SWIGTYPE_p_int.getCPtr(hit_mark), fz_quad.getCPtr(hit_bbox), hit_bbox, hit_max);
  }

  public static int fz_search_display_list(fz_context ctx, SWIGTYPE_p_fz_display_list list, byte[] needle, SWIGTYPE_p_int hit_mark, fz_quad hit_bbox, int hit_max) {
    return mupdfJNI.fz_search_display_list(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), needle, SWIGTYPE_p_int.getCPtr(hit_mark), fz_quad.getCPtr(hit_bbox), hit_bbox, hit_max);
  }

  public static int fz_search_page_cb(fz_context ctx, fz_page page, byte[] needle, SWIGTYPE_p_fz_search_callback_fn cb, SWIGTYPE_p_void opaque) {
    return mupdfJNI.fz_search_page_cb(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, needle, SWIGTYPE_p_fz_search_callback_fn.getCPtr(cb), SWIGTYPE_p_void.getCPtr(opaque));
  }

  public static int fz_search_page_number_cb(fz_context ctx, fz_document doc, int number, byte[] needle, SWIGTYPE_p_fz_search_callback_fn cb, SWIGTYPE_p_void opaque) {
    return mupdfJNI.fz_search_page_number_cb(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, number, needle, SWIGTYPE_p_fz_search_callback_fn.getCPtr(cb), SWIGTYPE_p_void.getCPtr(opaque));
  }

  public static int fz_search_chapter_page_number_cb(fz_context ctx, fz_document doc, int chapter, int page, byte[] needle, SWIGTYPE_p_fz_search_callback_fn cb, SWIGTYPE_p_void opaque) {
    return mupdfJNI.fz_search_chapter_page_number_cb(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(doc), doc, chapter, page, needle, SWIGTYPE_p_fz_search_callback_fn.getCPtr(cb), SWIGTYPE_p_void.getCPtr(opaque));
  }

  public static int fz_search_display_list_cb(fz_context ctx, SWIGTYPE_p_fz_display_list list, byte[] needle, SWIGTYPE_p_fz_search_callback_fn cb, SWIGTYPE_p_void opaque) {
    return mupdfJNI.fz_search_display_list_cb(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_display_list.getCPtr(list), needle, SWIGTYPE_p_fz_search_callback_fn.getCPtr(cb), SWIGTYPE_p_void.getCPtr(opaque));
  }

  public static SWIGTYPE_p_fz_display_list fz_new_display_list_from_svg(fz_context ctx, SWIGTYPE_p_fz_buffer buf, byte[] base_uri, SWIGTYPE_p_fz_archive dir, SWIGTYPE_p_float w, SWIGTYPE_p_float h) {
    long cPtr = mupdfJNI.fz_new_display_list_from_svg(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_buffer.getCPtr(buf), base_uri, SWIGTYPE_p_fz_archive.getCPtr(dir), SWIGTYPE_p_float.getCPtr(w), SWIGTYPE_p_float.getCPtr(h));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_display_list(cPtr, false);
  }

  public static SWIGTYPE_p_fz_image fz_new_image_from_svg(fz_context ctx, SWIGTYPE_p_fz_buffer buf, byte[] base_uri, SWIGTYPE_p_fz_archive dir) {
    long cPtr = mupdfJNI.fz_new_image_from_svg(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_buffer.getCPtr(buf), base_uri, SWIGTYPE_p_fz_archive.getCPtr(dir));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_image(cPtr, false);
  }

  public static SWIGTYPE_p_fz_display_list fz_new_display_list_from_svg_xml(fz_context ctx, SWIGTYPE_p_fz_xml_doc xmldoc, SWIGTYPE_p_fz_xml xml, byte[] base_uri, SWIGTYPE_p_fz_archive dir, SWIGTYPE_p_float w, SWIGTYPE_p_float h) {
    long cPtr = mupdfJNI.fz_new_display_list_from_svg_xml(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_xml_doc.getCPtr(xmldoc), SWIGTYPE_p_fz_xml.getCPtr(xml), base_uri, SWIGTYPE_p_fz_archive.getCPtr(dir), SWIGTYPE_p_float.getCPtr(w), SWIGTYPE_p_float.getCPtr(h));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_display_list(cPtr, false);
  }

  public static SWIGTYPE_p_fz_image fz_new_image_from_svg_xml(fz_context ctx, SWIGTYPE_p_fz_xml_doc xmldoc, SWIGTYPE_p_fz_xml xml, byte[] base_uri, SWIGTYPE_p_fz_archive dir) {
    long cPtr = mupdfJNI.fz_new_image_from_svg_xml(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_xml_doc.getCPtr(xmldoc), SWIGTYPE_p_fz_xml.getCPtr(xml), base_uri, SWIGTYPE_p_fz_archive.getCPtr(dir));
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_image(cPtr, false);
  }

  public static void fz_write_image_as_data_uri(fz_context ctx, SWIGTYPE_p_fz_output out, SWIGTYPE_p_fz_image image) {
    mupdfJNI.fz_write_image_as_data_uri(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_output.getCPtr(out), SWIGTYPE_p_fz_image.getCPtr(image));
  }

  public static void fz_write_pixmap_as_data_uri(fz_context ctx, SWIGTYPE_p_fz_output out, fz_pixmap pixmap) {
    mupdfJNI.fz_write_pixmap_as_data_uri(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_output.getCPtr(out), fz_pixmap.getCPtr(pixmap), pixmap);
  }

  public static void fz_append_image_as_data_uri(fz_context ctx, SWIGTYPE_p_fz_buffer out, SWIGTYPE_p_fz_image image) {
    mupdfJNI.fz_append_image_as_data_uri(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_buffer.getCPtr(out), SWIGTYPE_p_fz_image.getCPtr(image));
  }

  public static void fz_append_pixmap_as_data_uri(fz_context ctx, SWIGTYPE_p_fz_buffer out, fz_pixmap pixmap) {
    mupdfJNI.fz_append_pixmap_as_data_uri(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_buffer.getCPtr(out), fz_pixmap.getCPtr(pixmap), pixmap);
  }

  public static fz_document fz_new_xhtml_document_from_document(fz_context ctx, fz_document old_doc, SWIGTYPE_p_fz_stext_options opts) {
    long cPtr = mupdfJNI.fz_new_xhtml_document_from_document(fz_context.getCPtr(ctx), ctx, fz_document.getCPtr(old_doc), old_doc, SWIGTYPE_p_fz_stext_options.getCPtr(opts));
    return (cPtr == 0) ? null : new fz_document(cPtr, false);
  }

  public static SWIGTYPE_p_fz_buffer fz_new_buffer_from_page_with_format(fz_context ctx, fz_page page, byte[] format, byte[] options, fz_matrix transform, fz_cookie cookie) {
    long cPtr = mupdfJNI.fz_new_buffer_from_page_with_format(fz_context.getCPtr(ctx), ctx, fz_page.getCPtr(page), page, format, options, fz_matrix.getCPtr(transform), transform, fz_cookie.getCPtr(cookie), cookie);
    return (cPtr == 0) ? null : new SWIGTYPE_p_fz_buffer(cPtr, false);
  }

  public static int fz_mul255(int a, int b) {
    return mupdfJNI.fz_mul255(a, b);
  }

  public static int fz_div255(int c, int a) {
    return mupdfJNI.fz_div255(c, a);
  }

  public static float fz_atof(byte[] s) {
    return mupdfJNI.fz_atof(s);
  }

  public static int fz_atoi(byte[] s) {
    return mupdfJNI.fz_atoi(s);
  }

  public static long fz_atoi64(byte[] s) {
    return mupdfJNI.fz_atoi64(s);
  }

  public static int fz_atoz(byte[] s) {
    return mupdfJNI.fz_atoz(s);
  }

  public static float fz_abs(float f) {
    return mupdfJNI.fz_abs(f);
  }

  public static int fz_absi(int i) {
    return mupdfJNI.fz_absi(i);
  }

  public static float fz_min(float a, float b) {
    return mupdfJNI.fz_min(a, b);
  }

  public static int fz_mini(int a, int b) {
    return mupdfJNI.fz_mini(a, b);
  }

  public static int fz_minz(int a, int b) {
    return mupdfJNI.fz_minz(a, b);
  }

  public static long fz_mini64(long a, long b) {
    return mupdfJNI.fz_mini64(a, b);
  }

  public static float fz_max(float a, float b) {
    return mupdfJNI.fz_max(a, b);
  }

  public static int fz_maxi(int a, int b) {
    return mupdfJNI.fz_maxi(a, b);
  }

  public static int fz_maxz(int a, int b) {
    return mupdfJNI.fz_maxz(a, b);
  }

  public static long fz_maxi64(long a, long b) {
    return mupdfJNI.fz_maxi64(a, b);
  }

  public static float fz_clamp(float x, float min, float max) {
    return mupdfJNI.fz_clamp(x, min, max);
  }

  public static int fz_clampi(int x, int min, int max) {
    return mupdfJNI.fz_clampi(x, min, max);
  }

  public static long fz_clamp64(long x, long min, long max) {
    return mupdfJNI.fz_clamp64(x, min, max);
  }

  public static double fz_clampd(double x, double min, double max) {
    return mupdfJNI.fz_clampd(x, min, max);
  }

  public static SWIGTYPE_p_void fz_clampp(SWIGTYPE_p_void x, SWIGTYPE_p_void min, SWIGTYPE_p_void max) {
    long cPtr = mupdfJNI.fz_clampp(SWIGTYPE_p_void.getCPtr(x), SWIGTYPE_p_void.getCPtr(min), SWIGTYPE_p_void.getCPtr(max));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static fz_point fz_make_point(float x, float y) {
    return new fz_point(mupdfJNI.fz_make_point(x, y), true);
  }

  public static fz_rect fz_make_rect(float x0, float y0, float x1, float y1) {
    return new fz_rect(mupdfJNI.fz_make_rect(x0, y0, x1, y1), true);
  }

  public static fz_irect fz_make_irect(int x0, int y0, int x1, int y1) {
    return new fz_irect(mupdfJNI.fz_make_irect(x0, y0, x1, y1), true);
  }

  public static fz_rect getFz_unit_rect() {
    long cPtr = mupdfJNI.fz_unit_rect_get();
    return (cPtr == 0) ? null : new fz_rect(cPtr, false);
  }

  public static fz_rect getFz_empty_rect() {
    long cPtr = mupdfJNI.fz_empty_rect_get();
    return (cPtr == 0) ? null : new fz_rect(cPtr, false);
  }

  public static fz_irect getFz_empty_irect() {
    long cPtr = mupdfJNI.fz_empty_irect_get();
    return (cPtr == 0) ? null : new fz_irect(cPtr, false);
  }

  public static fz_rect getFz_infinite_rect() {
    long cPtr = mupdfJNI.fz_infinite_rect_get();
    return (cPtr == 0) ? null : new fz_rect(cPtr, false);
  }

  public static fz_irect getFz_infinite_irect() {
    long cPtr = mupdfJNI.fz_infinite_irect_get();
    return (cPtr == 0) ? null : new fz_irect(cPtr, false);
  }

  public static int fz_is_empty_rect(fz_rect r) {
    return mupdfJNI.fz_is_empty_rect(fz_rect.getCPtr(r), r);
  }

  public static int fz_is_empty_irect(fz_irect r) {
    return mupdfJNI.fz_is_empty_irect(fz_irect.getCPtr(r), r);
  }

  public static int fz_is_infinite_rect(fz_rect r) {
    return mupdfJNI.fz_is_infinite_rect(fz_rect.getCPtr(r), r);
  }

  public static int fz_is_infinite_irect(fz_irect r) {
    return mupdfJNI.fz_is_infinite_irect(fz_irect.getCPtr(r), r);
  }

  public static int fz_is_valid_rect(fz_rect r) {
    return mupdfJNI.fz_is_valid_rect(fz_rect.getCPtr(r), r);
  }

  public static int fz_is_valid_irect(fz_irect r) {
    return mupdfJNI.fz_is_valid_irect(fz_irect.getCPtr(r), r);
  }

  public static long fz_irect_width(fz_irect r) {
    return mupdfJNI.fz_irect_width(fz_irect.getCPtr(r), r);
  }

  public static int fz_irect_height(fz_irect r) {
    return mupdfJNI.fz_irect_height(fz_irect.getCPtr(r), r);
  }

  public static fz_matrix getFz_identity() {
    long cPtr = mupdfJNI.fz_identity_get();
    return (cPtr == 0) ? null : new fz_matrix(cPtr, false);
  }

  public static fz_matrix fz_make_matrix(float a, float b, float c, float d, float e, float f) {
    return new fz_matrix(mupdfJNI.fz_make_matrix(a, b, c, d, e, f), true);
  }

  public static int fz_is_identity(fz_matrix m) {
    return mupdfJNI.fz_is_identity(fz_matrix.getCPtr(m), m);
  }

  public static fz_matrix fz_concat(fz_matrix left, fz_matrix right) {
    return new fz_matrix(mupdfJNI.fz_concat(fz_matrix.getCPtr(left), left, fz_matrix.getCPtr(right), right), true);
  }

  public static fz_matrix fz_scale(float sx, float sy) {
    return new fz_matrix(mupdfJNI.fz_scale(sx, sy), true);
  }

  public static fz_matrix fz_pre_scale(fz_matrix m, float sx, float sy) {
    return new fz_matrix(mupdfJNI.fz_pre_scale(fz_matrix.getCPtr(m), m, sx, sy), true);
  }

  public static fz_matrix fz_post_scale(fz_matrix m, float sx, float sy) {
    return new fz_matrix(mupdfJNI.fz_post_scale(fz_matrix.getCPtr(m), m, sx, sy), true);
  }

  public static fz_matrix fz_shear(float sx, float sy) {
    return new fz_matrix(mupdfJNI.fz_shear(sx, sy), true);
  }

  public static fz_matrix fz_pre_shear(fz_matrix m, float sx, float sy) {
    return new fz_matrix(mupdfJNI.fz_pre_shear(fz_matrix.getCPtr(m), m, sx, sy), true);
  }

  public static fz_matrix fz_rotate(float degrees) {
    return new fz_matrix(mupdfJNI.fz_rotate(degrees), true);
  }

  public static fz_matrix fz_pre_rotate(fz_matrix m, float degrees) {
    return new fz_matrix(mupdfJNI.fz_pre_rotate(fz_matrix.getCPtr(m), m, degrees), true);
  }

  public static fz_matrix fz_translate(float tx, float ty) {
    return new fz_matrix(mupdfJNI.fz_translate(tx, ty), true);
  }

  public static fz_matrix fz_pre_translate(fz_matrix m, float tx, float ty) {
    return new fz_matrix(mupdfJNI.fz_pre_translate(fz_matrix.getCPtr(m), m, tx, ty), true);
  }

  public static fz_matrix fz_transform_page(fz_rect mediabox, float resolution, float rotate) {
    return new fz_matrix(mupdfJNI.fz_transform_page(fz_rect.getCPtr(mediabox), mediabox, resolution, rotate), true);
  }

  public static fz_matrix fz_invert_matrix(fz_matrix matrix) {
    return new fz_matrix(mupdfJNI.fz_invert_matrix(fz_matrix.getCPtr(matrix), matrix), true);
  }

  public static int fz_try_invert_matrix(fz_matrix inv, fz_matrix src) {
    return mupdfJNI.fz_try_invert_matrix(fz_matrix.getCPtr(inv), inv, fz_matrix.getCPtr(src), src);
  }

  public static int fz_is_rectilinear(fz_matrix m) {
    return mupdfJNI.fz_is_rectilinear(fz_matrix.getCPtr(m), m);
  }

  public static float fz_matrix_expansion(fz_matrix m) {
    return mupdfJNI.fz_matrix_expansion(fz_matrix.getCPtr(m), m);
  }

  public static fz_rect fz_intersect_rect(fz_rect a, fz_rect b) {
    return new fz_rect(mupdfJNI.fz_intersect_rect(fz_rect.getCPtr(a), a, fz_rect.getCPtr(b), b), true);
  }

  public static fz_irect fz_intersect_irect(fz_irect a, fz_irect b) {
    return new fz_irect(mupdfJNI.fz_intersect_irect(fz_irect.getCPtr(a), a, fz_irect.getCPtr(b), b), true);
  }

  public static fz_rect fz_union_rect(fz_rect a, fz_rect b) {
    return new fz_rect(mupdfJNI.fz_union_rect(fz_rect.getCPtr(a), a, fz_rect.getCPtr(b), b), true);
  }

  public static fz_irect fz_irect_from_rect(fz_rect rect) {
    return new fz_irect(mupdfJNI.fz_irect_from_rect(fz_rect.getCPtr(rect), rect), true);
  }

  public static fz_irect fz_round_rect(fz_rect rect) {
    return new fz_irect(mupdfJNI.fz_round_rect(fz_rect.getCPtr(rect), rect), true);
  }

  public static fz_rect fz_rect_from_irect(fz_irect bbox) {
    return new fz_rect(mupdfJNI.fz_rect_from_irect(fz_irect.getCPtr(bbox), bbox), true);
  }

  public static fz_rect fz_expand_rect(fz_rect b, float expand) {
    return new fz_rect(mupdfJNI.fz_expand_rect(fz_rect.getCPtr(b), b, expand), true);
  }

  public static fz_irect fz_expand_irect(fz_irect a, int expand) {
    return new fz_irect(mupdfJNI.fz_expand_irect(fz_irect.getCPtr(a), a, expand), true);
  }

  public static fz_rect fz_include_point_in_rect(fz_rect r, fz_point p) {
    return new fz_rect(mupdfJNI.fz_include_point_in_rect(fz_rect.getCPtr(r), r, fz_point.getCPtr(p), p), true);
  }

  public static fz_rect fz_translate_rect(fz_rect a, float xoff, float yoff) {
    return new fz_rect(mupdfJNI.fz_translate_rect(fz_rect.getCPtr(a), a, xoff, yoff), true);
  }

  public static fz_irect fz_translate_irect(fz_irect a, int xoff, int yoff) {
    return new fz_irect(mupdfJNI.fz_translate_irect(fz_irect.getCPtr(a), a, xoff, yoff), true);
  }

  public static int fz_contains_rect(fz_rect a, fz_rect b) {
    return mupdfJNI.fz_contains_rect(fz_rect.getCPtr(a), a, fz_rect.getCPtr(b), b);
  }

  public static fz_point fz_transform_point(fz_point point, fz_matrix m) {
    return new fz_point(mupdfJNI.fz_transform_point(fz_point.getCPtr(point), point, fz_matrix.getCPtr(m), m), true);
  }

  public static fz_point fz_transform_point_xy(float x, float y, fz_matrix m) {
    return new fz_point(mupdfJNI.fz_transform_point_xy(x, y, fz_matrix.getCPtr(m), m), true);
  }

  public static fz_point fz_transform_vector(fz_point vector, fz_matrix m) {
    return new fz_point(mupdfJNI.fz_transform_vector(fz_point.getCPtr(vector), vector, fz_matrix.getCPtr(m), m), true);
  }

  public static fz_rect fz_transform_rect(fz_rect rect, fz_matrix m) {
    return new fz_rect(mupdfJNI.fz_transform_rect(fz_rect.getCPtr(rect), rect, fz_matrix.getCPtr(m), m), true);
  }

  public static fz_point fz_normalize_vector(fz_point p) {
    return new fz_point(mupdfJNI.fz_normalize_vector(fz_point.getCPtr(p), p), true);
  }

  public static fz_matrix fz_gridfit_matrix(int as_tiled, fz_matrix m) {
    return new fz_matrix(mupdfJNI.fz_gridfit_matrix(as_tiled, fz_matrix.getCPtr(m), m), true);
  }

  public static float fz_matrix_max_expansion(fz_matrix m) {
    return mupdfJNI.fz_matrix_max_expansion(fz_matrix.getCPtr(m), m);
  }

  public static fz_quad fz_make_quad(float ul_x, float ul_y, float ur_x, float ur_y, float ll_x, float ll_y, float lr_x, float lr_y) {
    return new fz_quad(mupdfJNI.fz_make_quad(ul_x, ul_y, ur_x, ur_y, ll_x, ll_y, lr_x, lr_y), true);
  }

  public static fz_quad getFz_invalid_quad() {
    long cPtr = mupdfJNI.fz_invalid_quad_get();
    return (cPtr == 0) ? null : new fz_quad(cPtr, false);
  }

  public static fz_quad getFz_infinite_quad() {
    long cPtr = mupdfJNI.fz_infinite_quad_get();
    return (cPtr == 0) ? null : new fz_quad(cPtr, false);
  }

  public static int fz_is_valid_quad(fz_quad q) {
    return mupdfJNI.fz_is_valid_quad(fz_quad.getCPtr(q), q);
  }

  public static int fz_is_empty_quad(fz_quad q) {
    return mupdfJNI.fz_is_empty_quad(fz_quad.getCPtr(q), q);
  }

  public static int fz_is_infinite_quad(fz_quad q) {
    return mupdfJNI.fz_is_infinite_quad(fz_quad.getCPtr(q), q);
  }

  public static fz_quad fz_quad_from_rect(fz_rect r) {
    return new fz_quad(mupdfJNI.fz_quad_from_rect(fz_rect.getCPtr(r), r), true);
  }

  public static fz_rect fz_rect_from_quad(fz_quad q) {
    return new fz_rect(mupdfJNI.fz_rect_from_quad(fz_quad.getCPtr(q), q), true);
  }

  public static fz_quad fz_transform_quad(fz_quad q, fz_matrix m) {
    return new fz_quad(mupdfJNI.fz_transform_quad(fz_quad.getCPtr(q), q, fz_matrix.getCPtr(m), m), true);
  }

  public static int fz_is_point_inside_quad(fz_point p, fz_quad q) {
    return mupdfJNI.fz_is_point_inside_quad(fz_point.getCPtr(p), p, fz_quad.getCPtr(q), q);
  }

  public static int fz_is_point_inside_rect(fz_point p, fz_rect r) {
    return mupdfJNI.fz_is_point_inside_rect(fz_point.getCPtr(p), p, fz_rect.getCPtr(r), r);
  }

  public static int fz_is_point_inside_irect(int x, int y, fz_irect r) {
    return mupdfJNI.fz_is_point_inside_irect(x, y, fz_irect.getCPtr(r), r);
  }

  public static int fz_is_quad_inside_quad(fz_quad needle, fz_quad haystack) {
    return mupdfJNI.fz_is_quad_inside_quad(fz_quad.getCPtr(needle), needle, fz_quad.getCPtr(haystack), haystack);
  }

  public static int fz_is_quad_intersecting_quad(fz_quad a, fz_quad b) {
    return mupdfJNI.fz_is_quad_intersecting_quad(fz_quad.getCPtr(a), a, fz_quad.getCPtr(b), b);
  }

  public static fz_color_params getFz_default_color_params() {
    long cPtr = mupdfJNI.fz_default_color_params_get();
    return (cPtr == 0) ? null : new fz_color_params(cPtr, false);
  }

  public static int fz_lookup_rendering_intent(byte[] name) {
    return mupdfJNI.fz_lookup_rendering_intent(name);
  }

  public static byte[] fz_rendering_intent_name(int ri) {
    return mupdfJNI.fz_rendering_intent_name(ri);
  }

  public static fz_colorspace fz_new_colorspace(fz_context ctx, fz_colorspace_type type, int flags, int n, byte[] name) {
    long cPtr = mupdfJNI.fz_new_colorspace(fz_context.getCPtr(ctx), ctx, type.swigValue(), flags, n, name);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_keep_colorspace(fz_context ctx, fz_colorspace colorspace) {
    long cPtr = mupdfJNI.fz_keep_colorspace(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(colorspace), colorspace);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static void fz_drop_colorspace(fz_context ctx, fz_colorspace colorspace) {
    mupdfJNI.fz_drop_colorspace(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(colorspace), colorspace);
  }

  public static fz_colorspace fz_new_indexed_colorspace(fz_context ctx, fz_colorspace base, int high, byte[] lookup) {
    long cPtr = mupdfJNI.fz_new_indexed_colorspace(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(base), base, high, lookup);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_new_icc_colorspace(fz_context ctx, fz_colorspace_type type, int flags, byte[] name, SWIGTYPE_p_fz_buffer buf) {
    long cPtr = mupdfJNI.fz_new_icc_colorspace(fz_context.getCPtr(ctx), ctx, type.swigValue(), flags, name, SWIGTYPE_p_fz_buffer.getCPtr(buf));
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_new_cal_gray_colorspace(fz_context ctx, float[] wp, float[] bp, float gamma) {
    long cPtr = mupdfJNI.fz_new_cal_gray_colorspace(fz_context.getCPtr(ctx), ctx, wp, bp, gamma);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_new_cal_rgb_colorspace(fz_context ctx, float[] wp, float[] bp, float[] gamma, float[] matrix) {
    long cPtr = mupdfJNI.fz_new_cal_rgb_colorspace(fz_context.getCPtr(ctx), ctx, wp, bp, gamma, matrix);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static byte[] fz_colorspace_name(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_name(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_n(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_n(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_subtractive(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_subtractive(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_device_n_has_only_cmyk(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_device_n_has_only_cmyk(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_device_n_has_cmyk(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_device_n_has_cmyk(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_gray(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_gray(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_rgb(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_rgb(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_cmyk(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_cmyk(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_lab(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_lab(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_indexed(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_indexed(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_device_n(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_device_n(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_device(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_device(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_device_gray(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_device_gray(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_device_cmyk(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_device_cmyk(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_colorspace_is_lab_icc(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_colorspace_is_lab_icc(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static int fz_is_valid_blend_colorspace(fz_context ctx, fz_colorspace cs) {
    return mupdfJNI.fz_is_valid_blend_colorspace(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
  }

  public static fz_colorspace fz_base_colorspace(fz_context ctx, fz_colorspace cs) {
    long cPtr = mupdfJNI.fz_base_colorspace(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_device_gray(fz_context ctx) {
    long cPtr = mupdfJNI.fz_device_gray(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_device_rgb(fz_context ctx) {
    long cPtr = mupdfJNI.fz_device_rgb(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_device_bgr(fz_context ctx) {
    long cPtr = mupdfJNI.fz_device_bgr(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_device_cmyk(fz_context ctx) {
    long cPtr = mupdfJNI.fz_device_cmyk(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_device_lab(fz_context ctx) {
    long cPtr = mupdfJNI.fz_device_lab(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static void fz_colorspace_name_colorant(fz_context ctx, fz_colorspace cs, int n, byte[] name) {
    mupdfJNI.fz_colorspace_name_colorant(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs, n, name);
  }

  public static byte[] fz_colorspace_colorant(fz_context ctx, fz_colorspace cs, int n) {
    return mupdfJNI.fz_colorspace_colorant(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs, n);
  }

  public static void fz_clamp_color(fz_context ctx, fz_colorspace cs, SWIGTYPE_p_float in, SWIGTYPE_p_float out) {
    mupdfJNI.fz_clamp_color(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs, SWIGTYPE_p_float.getCPtr(in), SWIGTYPE_p_float.getCPtr(out));
  }

  public static void fz_convert_color(fz_context ctx, fz_colorspace ss, SWIGTYPE_p_float sv, fz_colorspace ds, SWIGTYPE_p_float dv, fz_colorspace is, fz_color_params params) {
    mupdfJNI.fz_convert_color(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(ss), ss, SWIGTYPE_p_float.getCPtr(sv), fz_colorspace.getCPtr(ds), ds, SWIGTYPE_p_float.getCPtr(dv), fz_colorspace.getCPtr(is), is, fz_color_params.getCPtr(params), params);
  }

  public static fz_default_colorspaces fz_new_default_colorspaces(fz_context ctx) {
    long cPtr = mupdfJNI.fz_new_default_colorspaces(fz_context.getCPtr(ctx), ctx);
    return (cPtr == 0) ? null : new fz_default_colorspaces(cPtr, false);
  }

  public static fz_default_colorspaces fz_keep_default_colorspaces(fz_context ctx, fz_default_colorspaces default_cs) {
    long cPtr = mupdfJNI.fz_keep_default_colorspaces(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs);
    return (cPtr == 0) ? null : new fz_default_colorspaces(cPtr, false);
  }

  public static void fz_drop_default_colorspaces(fz_context ctx, fz_default_colorspaces default_cs) {
    mupdfJNI.fz_drop_default_colorspaces(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs);
  }

  public static fz_default_colorspaces fz_clone_default_colorspaces(fz_context ctx, fz_default_colorspaces base) {
    long cPtr = mupdfJNI.fz_clone_default_colorspaces(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(base), base);
    return (cPtr == 0) ? null : new fz_default_colorspaces(cPtr, false);
  }

  public static fz_colorspace fz_default_gray(fz_context ctx, fz_default_colorspaces default_cs) {
    long cPtr = mupdfJNI.fz_default_gray(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_default_rgb(fz_context ctx, fz_default_colorspaces default_cs) {
    long cPtr = mupdfJNI.fz_default_rgb(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_default_cmyk(fz_context ctx, fz_default_colorspaces default_cs) {
    long cPtr = mupdfJNI.fz_default_cmyk(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static fz_colorspace fz_default_output_intent(fz_context ctx, fz_default_colorspaces default_cs) {
    long cPtr = mupdfJNI.fz_default_output_intent(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static void fz_set_default_gray(fz_context ctx, fz_default_colorspaces default_cs, fz_colorspace cs) {
    mupdfJNI.fz_set_default_gray(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs, fz_colorspace.getCPtr(cs), cs);
  }

  public static void fz_set_default_rgb(fz_context ctx, fz_default_colorspaces default_cs, fz_colorspace cs) {
    mupdfJNI.fz_set_default_rgb(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs, fz_colorspace.getCPtr(cs), cs);
  }

  public static void fz_set_default_cmyk(fz_context ctx, fz_default_colorspaces default_cs, fz_colorspace cs) {
    mupdfJNI.fz_set_default_cmyk(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs, fz_colorspace.getCPtr(cs), cs);
  }

  public static void fz_set_default_output_intent(fz_context ctx, fz_default_colorspaces default_cs, fz_colorspace cs) {
    mupdfJNI.fz_set_default_output_intent(fz_context.getCPtr(ctx), ctx, fz_default_colorspaces.getCPtr(default_cs), default_cs, fz_colorspace.getCPtr(cs), cs);
  }

  public static void fz_drop_colorspace_imp(fz_context ctx, SWIGTYPE_p_fz_storable cs_) {
    mupdfJNI.fz_drop_colorspace_imp(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_storable.getCPtr(cs_));
  }

  public static fz_irect fz_pixmap_bbox(fz_context ctx, fz_pixmap pix) {
    return new fz_irect(mupdfJNI.fz_pixmap_bbox(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix), true);
  }

  public static int fz_pixmap_width(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_width(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_height(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_height(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_x(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_x(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_y(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_y(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_size(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_size(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static fz_pixmap fz_new_pixmap(fz_context ctx, fz_colorspace cs, int w, int h, SWIGTYPE_p_fz_separations seps, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(cs), cs, w, h, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_with_bbox(fz_context ctx, fz_colorspace colorspace, fz_irect bbox, SWIGTYPE_p_fz_separations seps, int alpha) {
    long cPtr = mupdfJNI.fz_new_pixmap_with_bbox(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(colorspace), colorspace, fz_irect.getCPtr(bbox), bbox, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_with_data(fz_context ctx, fz_colorspace colorspace, int w, int h, SWIGTYPE_p_fz_separations seps, int alpha, int stride, byte[] samples) {
    long cPtr = mupdfJNI.fz_new_pixmap_with_data(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(colorspace), colorspace, w, h, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha, stride, samples);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_with_bbox_and_data(fz_context ctx, fz_colorspace colorspace, fz_irect rect, SWIGTYPE_p_fz_separations seps, int alpha, byte[] samples) {
    long cPtr = mupdfJNI.fz_new_pixmap_with_bbox_and_data(fz_context.getCPtr(ctx), ctx, fz_colorspace.getCPtr(colorspace), colorspace, fz_irect.getCPtr(rect), rect, SWIGTYPE_p_fz_separations.getCPtr(seps), alpha, samples);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_pixmap(fz_context ctx, fz_pixmap pixmap, fz_irect rect) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pixmap), pixmap, fz_irect.getCPtr(rect), rect);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_clone_pixmap(fz_context ctx, fz_pixmap old) {
    long cPtr = mupdfJNI.fz_clone_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(old), old);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_keep_pixmap(fz_context ctx, fz_pixmap pix) {
    long cPtr = mupdfJNI.fz_keep_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static void fz_drop_pixmap(fz_context ctx, fz_pixmap pix) {
    mupdfJNI.fz_drop_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static fz_colorspace fz_pixmap_colorspace(fz_context ctx, fz_pixmap pix) {
    long cPtr = mupdfJNI.fz_pixmap_colorspace(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
    return (cPtr == 0) ? null : new fz_colorspace(cPtr, false);
  }

  public static int fz_pixmap_components(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_components(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_colorants(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_colorants(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_spots(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_spots(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static int fz_pixmap_alpha(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_alpha(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

//  public static byte[] fz_pixmap_samples(fz_context ctx, fz_pixmap pix) {
//    long cPtr = mupdfJNI.fz_pixmap_samples(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
//    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
//  }

  public static int fz_pixmap_stride(fz_context ctx, fz_pixmap pix) {
    return mupdfJNI.fz_pixmap_stride(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static void fz_set_pixmap_resolution(fz_context ctx, fz_pixmap pix, int xres, int yres) {
    mupdfJNI.fz_set_pixmap_resolution(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, xres, yres);
  }

  public static void fz_clear_pixmap_with_value(fz_context ctx, fz_pixmap pix, int value) {
    mupdfJNI.fz_clear_pixmap_with_value(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, value);
  }

  public static void fz_fill_pixmap_with_color(fz_context ctx, fz_pixmap pix, fz_colorspace colorspace, SWIGTYPE_p_float color, fz_color_params color_params) {
    mupdfJNI.fz_fill_pixmap_with_color(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(color), fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_clear_pixmap_rect_with_value(fz_context ctx, fz_pixmap pix, int value, fz_irect r) {
    mupdfJNI.fz_clear_pixmap_rect_with_value(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, value, fz_irect.getCPtr(r), r);
  }

  public static void fz_clear_pixmap(fz_context ctx, fz_pixmap pix) {
    mupdfJNI.fz_clear_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static void fz_invert_pixmap(fz_context ctx, fz_pixmap pix) {
    mupdfJNI.fz_invert_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static void fz_invert_pixmap_alpha(fz_context ctx, fz_pixmap pix) {
    mupdfJNI.fz_invert_pixmap_alpha(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static void fz_invert_pixmap_luminance(fz_context ctx, fz_pixmap pix) {
    mupdfJNI.fz_invert_pixmap_luminance(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static void fz_tint_pixmap(fz_context ctx, fz_pixmap pix, int black, int white) {
    mupdfJNI.fz_tint_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, black, white);
  }

  public static void fz_invert_pixmap_rect(fz_context ctx, fz_pixmap image, fz_irect rect) {
    mupdfJNI.fz_invert_pixmap_rect(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(image), image, fz_irect.getCPtr(rect), rect);
  }

  public static void fz_invert_pixmap_raw(fz_context ctx, fz_pixmap pix) {
    mupdfJNI.fz_invert_pixmap_raw(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix);
  }

  public static void fz_gamma_pixmap(fz_context ctx, fz_pixmap pix, float gamma) {
    mupdfJNI.fz_gamma_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, gamma);
  }

  public static fz_pixmap fz_convert_pixmap(fz_context ctx, fz_pixmap pix, fz_colorspace cs_des, fz_colorspace prf, fz_default_colorspaces default_cs, fz_color_params color_params, int keep_alpha) {
    long cPtr = mupdfJNI.fz_convert_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, fz_colorspace.getCPtr(cs_des), cs_des, fz_colorspace.getCPtr(prf), prf, fz_default_colorspaces.getCPtr(default_cs), default_cs, fz_color_params.getCPtr(color_params), color_params, keep_alpha);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static int fz_is_pixmap_monochrome(fz_context ctx, fz_pixmap pixmap) {
    return mupdfJNI.fz_is_pixmap_monochrome(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pixmap), pixmap);
  }

  public static fz_pixmap fz_alpha_from_gray(fz_context ctx, fz_pixmap gray) {
    long cPtr = mupdfJNI.fz_alpha_from_gray(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(gray), gray);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static void fz_decode_tile(fz_context ctx, fz_pixmap pix, SWIGTYPE_p_float decode) {
    mupdfJNI.fz_decode_tile(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pix), pix, SWIGTYPE_p_float.getCPtr(decode));
  }

  public static void fz_md5_pixmap(fz_context ctx, fz_pixmap pixmap, short[] digest) {
    mupdfJNI.fz_md5_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(pixmap), pixmap, digest);
  }

  public static fz_stream fz_unpack_stream(fz_context ctx, fz_stream src, int depth, int w, int h, int n, int indexed, int pad, int skip) {
    long cPtr = mupdfJNI.fz_unpack_stream(fz_context.getCPtr(ctx), ctx, fz_stream.getCPtr(src), src, depth, w, h, n, indexed, pad, skip);
    return (cPtr == 0) ? null : new fz_stream(cPtr, false);
  }

  public static fz_pixmap fz_warp_pixmap(fz_context ctx, fz_pixmap src, fz_point points, int width, int height) {
    long cPtr = mupdfJNI.fz_warp_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(src), src, fz_point.getCPtr(points), points, width, height);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_autowarp_pixmap(fz_context ctx, fz_pixmap src, fz_point points) {
    long cPtr = mupdfJNI.fz_autowarp_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(src), src, fz_point.getCPtr(points), points);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static int fz_detect_document(fz_context ctx, fz_point points, fz_pixmap src) {
    return mupdfJNI.fz_detect_document(fz_context.getCPtr(ctx), ctx, fz_point.getCPtr(points), points, fz_pixmap.getCPtr(src), src);
  }

  public static fz_pixmap fz_clone_pixmap_area_with_different_seps(fz_context ctx, fz_pixmap src, fz_irect bbox, fz_colorspace dcs, SWIGTYPE_p_fz_separations seps, fz_color_params color_params, fz_default_colorspaces default_cs) {
    long cPtr = mupdfJNI.fz_clone_pixmap_area_with_different_seps(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(src), src, fz_irect.getCPtr(bbox), bbox, fz_colorspace.getCPtr(dcs), dcs, SWIGTYPE_p_fz_separations.getCPtr(seps), fz_color_params.getCPtr(color_params), color_params, fz_default_colorspaces.getCPtr(default_cs), default_cs);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_alpha_channel(fz_context ctx, fz_pixmap src) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_alpha_channel(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(src), src);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_new_pixmap_from_color_and_mask(fz_context ctx, fz_pixmap color, fz_pixmap mask) {
    long cPtr = mupdfJNI.fz_new_pixmap_from_color_and_mask(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(color), color, fz_pixmap.getCPtr(mask), mask);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static fz_pixmap fz_scale_pixmap(fz_context ctx, fz_pixmap src, float x, float y, float w, float h, fz_irect clip) {
    long cPtr = mupdfJNI.fz_scale_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(src), src, x, y, w, h, fz_irect.getCPtr(clip), clip);
    return (cPtr == 0) ? null : new fz_pixmap(cPtr, false);
  }

  public static void fz_subsample_pixmap(fz_context ctx, fz_pixmap tile, int factor) {
    mupdfJNI.fz_subsample_pixmap(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(tile), tile, factor);
  }

  public static void fz_copy_pixmap_rect(fz_context ctx, fz_pixmap dest, fz_pixmap src, fz_irect r, fz_default_colorspaces default_cs) {
    mupdfJNI.fz_copy_pixmap_rect(fz_context.getCPtr(ctx), ctx, fz_pixmap.getCPtr(dest), dest, fz_pixmap.getCPtr(src), src, fz_irect.getCPtr(r), r, fz_default_colorspaces.getCPtr(default_cs), default_cs);
  }

  public static int fz_lookup_blendmode(byte[] name) {
    return mupdfJNI.fz_lookup_blendmode(name);
  }

  public static byte[] fz_blendmode_name(int blendmode) {
    return mupdfJNI.fz_blendmode_name(blendmode);
  }

  public static fz_function fz_new_function_of_size(fz_context ctx, int size, int size2, int m, int n, SWIGTYPE_p_f_p_struct_fz_context_p_struct_fz_function_p_q_const__float_p_float__void eval, SWIGTYPE_p_fz_store_drop_fn drop) {
    long cPtr = mupdfJNI.fz_new_function_of_size(fz_context.getCPtr(ctx), ctx, size, size2, m, n, SWIGTYPE_p_f_p_struct_fz_context_p_struct_fz_function_p_q_const__float_p_float__void.getCPtr(eval), SWIGTYPE_p_fz_store_drop_fn.getCPtr(drop));
    return (cPtr == 0) ? null : new fz_function(cPtr, false);
  }

  public static void fz_eval_function(fz_context ctx, fz_function func, SWIGTYPE_p_float in, int inlen, SWIGTYPE_p_float out, int outlen) {
    mupdfJNI.fz_eval_function(fz_context.getCPtr(ctx), ctx, fz_function.getCPtr(func), func, SWIGTYPE_p_float.getCPtr(in), inlen, SWIGTYPE_p_float.getCPtr(out), outlen);
  }

  public static fz_function fz_keep_function(fz_context ctx, fz_function func) {
    long cPtr = mupdfJNI.fz_keep_function(fz_context.getCPtr(ctx), ctx, fz_function.getCPtr(func), func);
    return (cPtr == 0) ? null : new fz_function(cPtr, false);
  }

  public static void fz_drop_function(fz_context ctx, fz_function func) {
    mupdfJNI.fz_drop_function(fz_context.getCPtr(ctx), ctx, fz_function.getCPtr(func), func);
  }

  public static int fz_function_size(fz_context ctx, fz_function func) {
    return mupdfJNI.fz_function_size(fz_context.getCPtr(ctx), ctx, fz_function.getCPtr(func), func);
  }

  public static byte[] fz_structure_to_string(fz_structure type) {
    return mupdfJNI.fz_structure_to_string(type.swigValue());
  }

  public static fz_structure fz_structure_from_string(byte[] str) {
    return fz_structure.swigToEnum(mupdfJNI.fz_structure_from_string(str));
  }

  public static void fz_fill_path(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_path path, int even_odd, fz_matrix ctm, fz_colorspace colorspace, SWIGTYPE_p_float color, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_fill_path(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_path.getCPtr(path), even_odd, fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(color), alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_stroke_path(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_path path, SWIGTYPE_p_fz_stroke_state stroke, fz_matrix ctm, fz_colorspace colorspace, SWIGTYPE_p_float color, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_stroke_path(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_path.getCPtr(path), SWIGTYPE_p_fz_stroke_state.getCPtr(stroke), fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(color), alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_clip_path(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_path path, int even_odd, fz_matrix ctm, fz_rect scissor) {
    mupdfJNI.fz_clip_path(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_path.getCPtr(path), even_odd, fz_matrix.getCPtr(ctm), ctm, fz_rect.getCPtr(scissor), scissor);
  }

  public static void fz_clip_stroke_path(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_path path, SWIGTYPE_p_fz_stroke_state stroke, fz_matrix ctm, fz_rect scissor) {
    mupdfJNI.fz_clip_stroke_path(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_path.getCPtr(path), SWIGTYPE_p_fz_stroke_state.getCPtr(stroke), fz_matrix.getCPtr(ctm), ctm, fz_rect.getCPtr(scissor), scissor);
  }

  public static void fz_fill_text(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_text text, fz_matrix ctm, fz_colorspace colorspace, SWIGTYPE_p_float color, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_fill_text(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_text.getCPtr(text), fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(color), alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_stroke_text(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_text text, SWIGTYPE_p_fz_stroke_state stroke, fz_matrix ctm, fz_colorspace colorspace, SWIGTYPE_p_float color, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_stroke_text(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_text.getCPtr(text), SWIGTYPE_p_fz_stroke_state.getCPtr(stroke), fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(color), alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_clip_text(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_text text, fz_matrix ctm, fz_rect scissor) {
    mupdfJNI.fz_clip_text(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_text.getCPtr(text), fz_matrix.getCPtr(ctm), ctm, fz_rect.getCPtr(scissor), scissor);
  }

  public static void fz_clip_stroke_text(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_text text, SWIGTYPE_p_fz_stroke_state stroke, fz_matrix ctm, fz_rect scissor) {
    mupdfJNI.fz_clip_stroke_text(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_text.getCPtr(text), SWIGTYPE_p_fz_stroke_state.getCPtr(stroke), fz_matrix.getCPtr(ctm), ctm, fz_rect.getCPtr(scissor), scissor);
  }

  public static void fz_ignore_text(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_text text, fz_matrix ctm) {
    mupdfJNI.fz_ignore_text(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_text.getCPtr(text), fz_matrix.getCPtr(ctm), ctm);
  }

  public static void fz_pop_clip(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_pop_clip(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_fill_shade(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_shade shade, fz_matrix ctm, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_fill_shade(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_shade.getCPtr(shade), fz_matrix.getCPtr(ctm), ctm, alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_fill_image(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_image image, fz_matrix ctm, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_fill_image(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_image.getCPtr(image), fz_matrix.getCPtr(ctm), ctm, alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_fill_image_mask(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_image image, fz_matrix ctm, fz_colorspace colorspace, SWIGTYPE_p_float color, float alpha, fz_color_params color_params) {
    mupdfJNI.fz_fill_image_mask(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_image.getCPtr(image), fz_matrix.getCPtr(ctm), ctm, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(color), alpha, fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_clip_image_mask(fz_context ctx, fz_device dev, SWIGTYPE_p_fz_image image, fz_matrix ctm, fz_rect scissor) {
    mupdfJNI.fz_clip_image_mask(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, SWIGTYPE_p_fz_image.getCPtr(image), fz_matrix.getCPtr(ctm), ctm, fz_rect.getCPtr(scissor), scissor);
  }

  public static void fz_begin_mask(fz_context ctx, fz_device dev, fz_rect area, int luminosity, fz_colorspace colorspace, SWIGTYPE_p_float bc, fz_color_params color_params) {
    mupdfJNI.fz_begin_mask(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, fz_rect.getCPtr(area), area, luminosity, fz_colorspace.getCPtr(colorspace), colorspace, SWIGTYPE_p_float.getCPtr(bc), fz_color_params.getCPtr(color_params), color_params);
  }

  public static void fz_end_mask(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_end_mask(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_end_mask_tr(fz_context ctx, fz_device dev, fz_function fn) {
    mupdfJNI.fz_end_mask_tr(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, fz_function.getCPtr(fn), fn);
  }

  public static void fz_begin_group(fz_context ctx, fz_device dev, fz_rect area, fz_colorspace cs, int isolated, int knockout, int blendmode, float alpha) {
    mupdfJNI.fz_begin_group(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, fz_rect.getCPtr(area), area, fz_colorspace.getCPtr(cs), cs, isolated, knockout, blendmode, alpha);
  }

  public static void fz_end_group(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_end_group(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_begin_tile(fz_context ctx, fz_device dev, fz_rect area, fz_rect view, float xstep, float ystep, fz_matrix ctm) {
    mupdfJNI.fz_begin_tile(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, fz_rect.getCPtr(area), area, fz_rect.getCPtr(view), view, xstep, ystep, fz_matrix.getCPtr(ctm), ctm);
  }

  public static int fz_begin_tile_id(fz_context ctx, fz_device dev, fz_rect area, fz_rect view, float xstep, float ystep, fz_matrix ctm, int id) {
    return mupdfJNI.fz_begin_tile_id(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, fz_rect.getCPtr(area), area, fz_rect.getCPtr(view), view, xstep, ystep, fz_matrix.getCPtr(ctm), ctm, id);
  }

  public static void fz_end_tile(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_end_tile(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_render_flags(fz_context ctx, fz_device dev, int set, int clear) {
    mupdfJNI.fz_render_flags(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, set, clear);
  }

  public static void fz_set_default_colorspaces(fz_context ctx, fz_device dev, fz_default_colorspaces default_cs) {
    mupdfJNI.fz_set_default_colorspaces(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, fz_default_colorspaces.getCPtr(default_cs), default_cs);
  }

  public static void fz_begin_layer(fz_context ctx, fz_device dev, byte[] layer_name) {
    mupdfJNI.fz_begin_layer(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, layer_name);
  }

  public static void fz_end_layer(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_end_layer(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_begin_structure(fz_context ctx, fz_device dev, fz_structure standard, byte[] raw, int idx) {
    mupdfJNI.fz_begin_structure(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, standard.swigValue(), raw, idx);
  }

  public static void fz_end_structure(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_end_structure(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_begin_metatext(fz_context ctx, fz_device dev, fz_metatext meta, byte[] text) {
    mupdfJNI.fz_begin_metatext(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, meta.swigValue(), text);
  }

  public static void fz_end_metatext(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_end_metatext(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static fz_device fz_new_device_of_size(fz_context ctx, int size) {
    long cPtr = mupdfJNI.fz_new_device_of_size(fz_context.getCPtr(ctx), ctx, size);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static void fz_close_device(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_close_device(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static void fz_drop_device(fz_context ctx, fz_device dev) {
    mupdfJNI.fz_drop_device(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
  }

  public static fz_device fz_keep_device(fz_context ctx, fz_device dev) {
    long cPtr = mupdfJNI.fz_keep_device(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static void fz_enable_device_hints(fz_context ctx, fz_device dev, int hints) {
    mupdfJNI.fz_enable_device_hints(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, hints);
  }

  public static void fz_disable_device_hints(fz_context ctx, fz_device dev, int hints) {
    mupdfJNI.fz_disable_device_hints(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev, hints);
  }

  public static fz_rect fz_device_current_scissor(fz_context ctx, fz_device dev) {
    return new fz_rect(mupdfJNI.fz_device_current_scissor(fz_context.getCPtr(ctx), ctx, fz_device.getCPtr(dev), dev), true);
  }

  public static fz_device fz_new_trace_device(fz_context ctx, SWIGTYPE_p_fz_output out) {
    long cPtr = mupdfJNI.fz_new_trace_device(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_output.getCPtr(out));
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_xmltext_device(fz_context ctx, SWIGTYPE_p_fz_output out) {
    long cPtr = mupdfJNI.fz_new_xmltext_device(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_fz_output.getCPtr(out));
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_bbox_device(fz_context ctx, fz_rect rectp) {
    long cPtr = mupdfJNI.fz_new_bbox_device(fz_context.getCPtr(ctx), ctx, fz_rect.getCPtr(rectp), rectp);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_test_device(fz_context ctx, SWIGTYPE_p_int is_color, float threshold, int options, fz_device passthrough) {
    long cPtr = mupdfJNI.fz_new_test_device(fz_context.getCPtr(ctx), ctx, SWIGTYPE_p_int.getCPtr(is_color), threshold, options, fz_device.getCPtr(passthrough), passthrough);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_draw_device(fz_context ctx, fz_matrix transform, fz_pixmap dest) {
    long cPtr = mupdfJNI.fz_new_draw_device(fz_context.getCPtr(ctx), ctx, fz_matrix.getCPtr(transform), transform, fz_pixmap.getCPtr(dest), dest);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_draw_device_with_bbox(fz_context ctx, fz_matrix transform, fz_pixmap dest, fz_irect clip) {
    long cPtr = mupdfJNI.fz_new_draw_device_with_bbox(fz_context.getCPtr(ctx), ctx, fz_matrix.getCPtr(transform), transform, fz_pixmap.getCPtr(dest), dest, fz_irect.getCPtr(clip), clip);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_draw_device_with_proof(fz_context ctx, fz_matrix transform, fz_pixmap dest, fz_colorspace proof_cs) {
    long cPtr = mupdfJNI.fz_new_draw_device_with_proof(fz_context.getCPtr(ctx), ctx, fz_matrix.getCPtr(transform), transform, fz_pixmap.getCPtr(dest), dest, fz_colorspace.getCPtr(proof_cs), proof_cs);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_draw_device_with_bbox_proof(fz_context ctx, fz_matrix transform, fz_pixmap dest, fz_irect clip, fz_colorspace cs) {
    long cPtr = mupdfJNI.fz_new_draw_device_with_bbox_proof(fz_context.getCPtr(ctx), ctx, fz_matrix.getCPtr(transform), transform, fz_pixmap.getCPtr(dest), dest, fz_irect.getCPtr(clip), clip, fz_colorspace.getCPtr(cs), cs);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static fz_device fz_new_draw_device_type3(fz_context ctx, fz_matrix transform, fz_pixmap dest) {
    long cPtr = mupdfJNI.fz_new_draw_device_type3(fz_context.getCPtr(ctx), ctx, fz_matrix.getCPtr(transform), transform, fz_pixmap.getCPtr(dest), dest);
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

  public static void setFz_draw_options_usage(byte[] value) {
    mupdfJNI.fz_draw_options_usage_set(value);
  }

  public static byte[] getFz_draw_options_usage() {
    return mupdfJNI.fz_draw_options_usage_get();
  }

  public static fz_draw_options fz_parse_draw_options(fz_context ctx, fz_draw_options options, byte[] string) {
    long cPtr = mupdfJNI.fz_parse_draw_options(fz_context.getCPtr(ctx), ctx, fz_draw_options.getCPtr(options), options, string);
    return (cPtr == 0) ? null : new fz_draw_options(cPtr, false);
  }

  public static fz_device fz_new_draw_device_with_options(fz_context ctx, fz_draw_options options, fz_rect mediabox, SWIGTYPE_p_p_fz_pixmap pixmap) {
    long cPtr = mupdfJNI.fz_new_draw_device_with_options(fz_context.getCPtr(ctx), ctx, fz_draw_options.getCPtr(options), options, fz_rect.getCPtr(mediabox), mediabox, SWIGTYPE_p_p_fz_pixmap.getCPtr(pixmap));
    return (cPtr == 0) ? null : new fz_device(cPtr, false);
  }

}
